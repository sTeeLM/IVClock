<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [IVClock\IVClock.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image IVClock\IVClock.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Tue Aug 17 22:27:33 2021
<BR><P>
<H3>Maximum Stack Usage =        304 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
con_power &rArr; power_get_bat_voltage &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5a]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">CAN1_RX1_IRQHandler</a><BR>
 <LI><a href="#[3f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">BusFault_Handler</a><BR>
 <LI><a href="#[3d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">HardFault_Handler</a><BR>
 <LI><a href="#[3e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">MemManage_Handler</a><BR>
 <LI><a href="#[3c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">NMI_Handler</a><BR>
 <LI><a href="#[40]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[57]">ADC1_2_IRQHandler</a> from adc.o(.text.ADC1_2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[75]">BSP_DS3231_Read_Data</a> from ds3231.o(.text.BSP_DS3231_Read_Data) referenced from ds3231.o(.text.BSP_DS3231_Dump)
 <LI><a href="#[73]">BSP_I2C_Write</a> from i2c.o(.text.BSP_I2C_Write) referenced from acc.o(.text.BSP_ACC_Threshold_Set)
 <LI><a href="#[7c]">BSP_IV18_Set_Blink</a> from iv18.o(.text.BSP_IV18_Set_Blink) referenced from display.o(.text.display_format_param_beeper)
 <LI><a href="#[7c]">BSP_IV18_Set_Blink</a> from iv18.o(.text.BSP_IV18_Set_Blink) referenced from display.o(.text.display_format_power)
 <LI><a href="#[7d]">BSP_IV18_Set_DP</a> from iv18.o(.text.BSP_IV18_Set_DP) referenced from display.o(.text.display_format_timer)
 <LI><a href="#[7b]">BSP_IV18_Set_Dig</a> from iv18.o(.text.BSP_IV18_Set_Dig) referenced from display.o(.text.display_format_clock)
 <LI><a href="#[7b]">BSP_IV18_Set_Dig</a> from iv18.o(.text.BSP_IV18_Set_Dig) referenced from display.o(.text.display_format_hour12)
 <LI><a href="#[7b]">BSP_IV18_Set_Dig</a> from iv18.o(.text.BSP_IV18_Set_Dig) referenced from display.o(.text.display_format_light_mon)
 <LI><a href="#[7b]">BSP_IV18_Set_Dig</a> from iv18.o(.text.BSP_IV18_Set_Dig) referenced from display.o(.text.display_format_param_beeper)
 <LI><a href="#[7b]">BSP_IV18_Set_Dig</a> from iv18.o(.text.BSP_IV18_Set_Dig) referenced from display.o(.text.display_format_thermo_unit)
 <LI><a href="#[7b]">BSP_IV18_Set_Dig</a> from iv18.o(.text.BSP_IV18_Set_Dig) referenced from display.o(.text.display_format_timer)
 <LI><a href="#[3f]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5a]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5b]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[50]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[51]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[52]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[53]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[54]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[55]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[56]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[42]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4b]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6d]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4c]">EXTI1_IRQHandler</a> from extint.o(.text.EXTI1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4d]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4e]">EXTI3_IRQHandler</a> from extint.o(.text.EXTI3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4f]">EXTI4_IRQHandler</a> from extint.o(.text.EXTI4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5c]">EXTI9_5_IRQHandler</a> from extint.o(.text.EXTI9_5_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[49]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[78]">HAL_GPIO_EXTI_IRQHandler</a> from stm32f1xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler) referenced from extint.o(.text.EXTI9_5_IRQHandler)
 <LI><a href="#[76]">HAL_GPIO_Init</a> from stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from gpio.o(.text.BSP_GPIO_Init)
 <LI><a href="#[76]">HAL_GPIO_Init</a> from stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from iv18.o(.text.BSP_IV18_Init)
 <LI><a href="#[77]">HAL_GPIO_WritePin</a> from stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin) referenced from iv18.o(.text.BSP_IV18_Show_Data)
 <LI><a href="#[3d]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[65]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[64]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[67]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[66]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3e]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3c]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[46]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[43]">PendSV_Handler</a> from stm32f1xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[80]">PrintBsp</a> from main.o(.text.PrintBsp) referenced from main.o(.text.main)
 <LI><a href="#[4a]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6e]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[48]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[68]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[69]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[41]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[44]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[71]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[47]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5d]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[60]">TIM1_CC_IRQHandler</a> from tim.o(.text.TIM1_CC_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5f]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5e]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[61]">TIM2_IRQHandler</a> from tim.o(.text.TIM2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[62]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[63]">TIM4_IRQHandler</a> from tim.o(.text.TIM4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[79]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[6a]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6b]">USART2_IRQHandler</a> from usart.o(.text.USART2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6c]">USART3_IRQHandler</a> from usart.o(.text.USART3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6f]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[58]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[59]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[40]">UsageFault_Handler</a> from stm32f1xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[45]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[72]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[81]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[81]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[89]">alarm_proc</a> from alarm.o(.text.alarm_proc) referenced 2 times from task.o(.rodata.task_procs)
 <LI><a href="#[86]">button_mod_proc</a> from button.o(.text.button_mod_proc) referenced 4 times from task.o(.rodata.task_procs)
 <LI><a href="#[87]">button_mod_set_proc</a> from button.o(.text.button_mod_set_proc) referenced 2 times from task.o(.rodata.task_procs)
 <LI><a href="#[84]">button_scan_proc</a> from button.o(.text.button_scan_proc) referenced from task.o(.rodata.task_procs)
 <LI><a href="#[85]">button_set_proc</a> from button.o(.text.button_set_proc) referenced 4 times from task.o(.rodata.task_procs)
 <LI><a href="#[83]">clock_time_proc</a> from clock.o(.text.clock_time_proc) referenced 2 times from task.o(.rodata.task_procs)
 <LI><a href="#[2]">con_alarm</a> from con_alarm.o(.text.con_alarm) referenced 2 times from console.o(.data.cmds)
 <LI><a href="#[5]">con_beeper</a> from con_beeper.o(.text.con_beeper) referenced 2 times from console.o(.data.cmds)
 <LI><a href="#[1]">con_clock</a> from con_clock.o(.text.con_clock) referenced 2 times from console.o(.data.cmds)
 <LI><a href="#[6]">con_display</a> from con_display.o(.text.con_display) referenced 2 times from console.o(.data.cmds)
 <LI><a href="#[0]">con_help</a> from con_help.o(.text.con_help) referenced 2 times from console.o(.data.cmds)
 <LI><a href="#[3]">con_motion_sensor</a> from con_motion_sensor.o(.text.con_motion_sensor) referenced 2 times from console.o(.data.cmds)
 <LI><a href="#[7]">con_player</a> from con_player.o(.text.con_player) referenced 2 times from console.o(.data.cmds)
 <LI><a href="#[4]">con_power</a> from con_power.o(.text.con_power) referenced 2 times from console.o(.data.cmds)
 <LI><a href="#[8]">con_quit</a> from console.o(.text.con_quit) referenced 2 times from console.o(.data.cmds)
 <LI><a href="#[7a]">console_printf</a> from console.o(.text.console_printf) referenced from alarm.o(.text.alarm_show)
 <LI><a href="#[7a]">console_printf</a> from console.o(.text.console_printf) referenced from console.o(.text.console_run)
 <LI><a href="#[74]">debug_printf</a> from debug.o(.text.debug_printf) referenced from ds3231.o(.text.BSP_DS3231_Dump)
 <LI><a href="#[74]">debug_printf</a> from debug.o(.text.debug_printf) referenced from alarm.o(.text.alarm_dump)
 <LI><a href="#[74]">debug_printf</a> from debug.o(.text.debug_printf) referenced from clock.o(.text.clock_dump)
 <LI><a href="#[74]">debug_printf</a> from debug.o(.text.debug_printf) referenced from remote_control.o(.text.remote_control_dump_msg)
 <LI><a href="#[7f]">display_clr_blink</a> from display.o(.text.display_clr_blink) referenced from display.o(.text.display_set_blink_all)
 <LI><a href="#[7e]">display_set_blink</a> from display.o(.text.display_set_blink) referenced from display.o(.text.display_set_blink_all)
 <LI><a href="#[11]">do_clock_display_alarm0</a> from sm_clock_display.o(.text.do_clock_display_alarm0) referenced 6 times from sm_clock_display.o(.data.sm_trans_clock_display_alarm0)
 <LI><a href="#[11]">do_clock_display_alarm0</a> from sm_clock_display.o(.text.do_clock_display_alarm0) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_time)
 <LI><a href="#[13]">do_clock_display_alarm1</a> from sm_clock_display.o(.text.do_clock_display_alarm1) referenced 6 times from sm_clock_display.o(.data.sm_trans_clock_display_alarm1)
 <LI><a href="#[13]">do_clock_display_alarm1</a> from sm_clock_display.o(.text.do_clock_display_alarm1) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_time)
 <LI><a href="#[14]">do_clock_display_date</a> from sm_clock_display.o(.text.do_clock_display_date) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_date)
 <LI><a href="#[14]">do_clock_display_date</a> from sm_clock_display.o(.text.do_clock_display_date) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_time)
 <LI><a href="#[14]">do_clock_display_date</a> from sm_clock_display.o(.text.do_clock_display_date) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_week)
 <LI><a href="#[18]">do_clock_display_init</a> from sm_clock_display.o(.text.do_clock_display_init) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_time)
 <LI><a href="#[18]">do_clock_display_init</a> from sm_clock_display.o(.text.do_clock_display_init) referenced 2 times from sm_stop_watch.o(.data.sm_trans_stop_watch_stop)
 <LI><a href="#[17]">do_clock_display_temp</a> from sm_clock_display.o(.text.do_clock_display_temp) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_temp)
 <LI><a href="#[17]">do_clock_display_temp</a> from sm_clock_display.o(.text.do_clock_display_temp) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_time)
 <LI><a href="#[17]">do_clock_display_temp</a> from sm_clock_display.o(.text.do_clock_display_temp) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_week)
 <LI><a href="#[12]">do_clock_display_time</a> from sm_clock_display.o(.text.do_clock_display_time) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_alarm0)
 <LI><a href="#[12]">do_clock_display_time</a> from sm_clock_display.o(.text.do_clock_display_time) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_alarm1)
 <LI><a href="#[12]">do_clock_display_time</a> from sm_clock_display.o(.text.do_clock_display_time) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_date)
 <LI><a href="#[12]">do_clock_display_time</a> from sm_clock_display.o(.text.do_clock_display_time) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_init)
 <LI><a href="#[12]">do_clock_display_time</a> from sm_clock_display.o(.text.do_clock_display_time) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_temp)
 <LI><a href="#[12]">do_clock_display_time</a> from sm_clock_display.o(.text.do_clock_display_time) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_time)
 <LI><a href="#[15]">do_clock_display_week</a> from sm_clock_display.o(.text.do_clock_display_week) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_date)
 <LI><a href="#[15]">do_clock_display_week</a> from sm_clock_display.o(.text.do_clock_display_week) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_temp)
 <LI><a href="#[15]">do_clock_display_week</a> from sm_clock_display.o(.text.do_clock_display_week) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_week)
 <LI><a href="#[b]">do_get_alarm</a> from remote_control.o(.text.do_get_alarm) referenced 2 times from remote_control.o(.data.remote_control_proc)
 <LI><a href="#[f]">do_get_bat</a> from remote_control.o(.text.do_get_bat) referenced 2 times from remote_control.o(.data.remote_control_proc)
 <LI><a href="#[d]">do_get_param</a> from remote_control.o(.text.do_get_param) referenced 2 times from remote_control.o(.data.remote_control_proc)
 <LI><a href="#[9]">do_get_time</a> from remote_control.o(.text.do_get_time) referenced 2 times from remote_control.o(.data.remote_control_proc)
 <LI><a href="#[c]">do_set_alarm</a> from remote_control.o(.text.do_set_alarm) referenced 2 times from remote_control.o(.data.remote_control_proc)
 <LI><a href="#[19]">do_set_alarm_day</a> from sm_set_alarm.o(.text.do_set_alarm_day) referenced 4 times from sm_set_alarm.o(.data.sm_trans_set_alarm_day)
 <LI><a href="#[19]">do_set_alarm_day</a> from sm_set_alarm.o(.text.do_set_alarm_day) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_min)
 <LI><a href="#[1c]">do_set_alarm_hour</a> from sm_set_alarm.o(.text.do_set_alarm_hour) referenced 8 times from sm_set_alarm.o(.data.sm_trans_set_alarm_hour)
 <LI><a href="#[1c]">do_set_alarm_hour</a> from sm_set_alarm.o(.text.do_set_alarm_hour) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_sel)
 <LI><a href="#[21]">do_set_alarm_init</a> from sm_set_alarm.o(.text.do_set_alarm_init) referenced 2 times from sm_set_date.o(.data.sm_trans_set_date_date)
 <LI><a href="#[21]">do_set_alarm_init</a> from sm_set_alarm.o(.text.do_set_alarm_init) referenced 2 times from sm_set_date.o(.data.sm_trans_set_date_mon)
 <LI><a href="#[21]">do_set_alarm_init</a> from sm_set_alarm.o(.text.do_set_alarm_init) referenced 2 times from sm_set_date.o(.data.sm_trans_set_date_year)
 <LI><a href="#[1d]">do_set_alarm_min</a> from sm_set_alarm.o(.text.do_set_alarm_min) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_hour)
 <LI><a href="#[1d]">do_set_alarm_min</a> from sm_set_alarm.o(.text.do_set_alarm_min) referenced 8 times from sm_set_alarm.o(.data.sm_trans_set_alarm_min)
 <LI><a href="#[1e]">do_set_alarm_sel</a> from sm_set_alarm.o(.text.do_set_alarm_sel) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_init)
 <LI><a href="#[1e]">do_set_alarm_sel</a> from sm_set_alarm.o(.text.do_set_alarm_sel) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_sel)
 <LI><a href="#[1e]">do_set_alarm_sel</a> from sm_set_alarm.o(.text.do_set_alarm_sel) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_snd)
 <LI><a href="#[1a]">do_set_alarm_snd</a> from sm_set_alarm.o(.text.do_set_alarm_snd) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_day)
 <LI><a href="#[1a]">do_set_alarm_snd</a> from sm_set_alarm.o(.text.do_set_alarm_snd) referenced 8 times from sm_set_alarm.o(.data.sm_trans_set_alarm_snd)
 <LI><a href="#[1f]">do_set_date_date</a> from sm_set_date.o(.text.do_set_date_date) referenced 8 times from sm_set_date.o(.data.sm_trans_set_date_date)
 <LI><a href="#[1f]">do_set_date_date</a> from sm_set_date.o(.text.do_set_date_date) referenced 2 times from sm_set_date.o(.data.sm_trans_set_date_mon)
 <LI><a href="#[2f]">do_set_date_init</a> from sm_set_date.o(.text.do_set_date_init) referenced 2 times from sm_set_time.o(.data.sm_trans_set_time_hour)
 <LI><a href="#[2f]">do_set_date_init</a> from sm_set_date.o(.text.do_set_date_init) referenced 2 times from sm_set_time.o(.data.sm_trans_set_time_min)
 <LI><a href="#[2f]">do_set_date_init</a> from sm_set_date.o(.text.do_set_date_init) referenced 2 times from sm_set_time.o(.data.sm_trans_set_time_sec)
 <LI><a href="#[22]">do_set_date_mon</a> from sm_set_date.o(.text.do_set_date_mon) referenced 8 times from sm_set_date.o(.data.sm_trans_set_date_mon)
 <LI><a href="#[22]">do_set_date_mon</a> from sm_set_date.o(.text.do_set_date_mon) referenced 2 times from sm_set_date.o(.data.sm_trans_set_date_year)
 <LI><a href="#[20]">do_set_date_year</a> from sm_set_date.o(.text.do_set_date_year) referenced 2 times from sm_set_date.o(.data.sm_trans_set_date_date)
 <LI><a href="#[20]">do_set_date_year</a> from sm_set_date.o(.text.do_set_date_year) referenced 2 times from sm_set_date.o(.data.sm_trans_set_date_init)
 <LI><a href="#[20]">do_set_date_year</a> from sm_set_date.o(.text.do_set_date_year) referenced 8 times from sm_set_date.o(.data.sm_trans_set_date_year)
 <LI><a href="#[e]">do_set_param</a> from remote_control.o(.text.do_set_param) referenced 2 times from remote_control.o(.data.remote_control_proc)
 <LI><a href="#[23]">do_set_param_baoshi</a> from sm_set_param.o(.text.do_set_param_baoshi) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_baoshi)
 <LI><a href="#[23]">do_set_param_baoshi</a> from sm_set_param.o(.text.do_set_param_baoshi) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_beeper)
 <LI><a href="#[26]">do_set_param_beeper</a> from sm_set_param.o(.text.do_set_param_beeper) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_beeper)
 <LI><a href="#[26]">do_set_param_beeper</a> from sm_set_param.o(.text.do_set_param_beeper) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_init)
 <LI><a href="#[26]">do_set_param_beeper</a> from sm_set_param.o(.text.do_set_param_beeper) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_motion_mon)
 <LI><a href="#[27]">do_set_param_hour12</a> from sm_set_param.o(.text.do_set_param_hour12) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_hour12)
 <LI><a href="#[27]">do_set_param_hour12</a> from sm_set_param.o(.text.do_set_param_hour12) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_player_vol)
 <LI><a href="#[1b]">do_set_param_init</a> from sm_set_param.o(.text.do_set_param_init) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_day)
 <LI><a href="#[1b]">do_set_param_init</a> from sm_set_param.o(.text.do_set_param_init) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_hour)
 <LI><a href="#[1b]">do_set_param_init</a> from sm_set_param.o(.text.do_set_param_init) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_min)
 <LI><a href="#[1b]">do_set_param_init</a> from sm_set_param.o(.text.do_set_param_init) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_sel)
 <LI><a href="#[1b]">do_set_param_init</a> from sm_set_param.o(.text.do_set_param_init) referenced 2 times from sm_set_alarm.o(.data.sm_trans_set_alarm_snd)
 <LI><a href="#[28]">do_set_param_light_mon</a> from sm_set_param.o(.text.do_set_param_light_mon) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_hour12)
 <LI><a href="#[28]">do_set_param_light_mon</a> from sm_set_param.o(.text.do_set_param_light_mon) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_light_mon)
 <LI><a href="#[29]">do_set_param_motion_mon</a> from sm_set_param.o(.text.do_set_param_motion_mon) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_light_mon)
 <LI><a href="#[29]">do_set_param_motion_mon</a> from sm_set_param.o(.text.do_set_param_motion_mon) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_motion_mon)
 <LI><a href="#[2a]">do_set_param_player_vol</a> from sm_set_param.o(.text.do_set_param_player_vol) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_player_vol)
 <LI><a href="#[2a]">do_set_param_player_vol</a> from sm_set_param.o(.text.do_set_param_player_vol) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_thermo)
 <LI><a href="#[2b]">do_set_param_ps</a> from sm_set_param.o(.text.do_set_param_ps) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_ps)
 <LI><a href="#[2b]">do_set_param_ps</a> from sm_set_param.o(.text.do_set_param_ps) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_timer_snd)
 <LI><a href="#[2c]">do_set_param_thermo</a> from sm_set_param.o(.text.do_set_param_thermo) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_ps)
 <LI><a href="#[2c]">do_set_param_thermo</a> from sm_set_param.o(.text.do_set_param_thermo) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_thermo)
 <LI><a href="#[24]">do_set_param_timer_snd</a> from sm_set_param.o(.text.do_set_param_timer_snd) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_baoshi)
 <LI><a href="#[24]">do_set_param_timer_snd</a> from sm_set_param.o(.text.do_set_param_timer_snd) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_timer_snd)
 <LI><a href="#[a]">do_set_time</a> from remote_control.o(.text.do_set_time) referenced 2 times from remote_control.o(.data.remote_control_proc)
 <LI><a href="#[2d]">do_set_time_hour</a> from sm_set_time.o(.text.do_set_time_hour) referenced 8 times from sm_set_time.o(.data.sm_trans_set_time_hour)
 <LI><a href="#[2d]">do_set_time_hour</a> from sm_set_time.o(.text.do_set_time_hour) referenced 2 times from sm_set_time.o(.data.sm_trans_set_time_init)
 <LI><a href="#[2d]">do_set_time_hour</a> from sm_set_time.o(.text.do_set_time_hour) referenced 2 times from sm_set_time.o(.data.sm_trans_set_time_sec)
 <LI><a href="#[16]">do_set_time_init</a> from sm_set_time.o(.text.do_set_time_init) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_date)
 <LI><a href="#[16]">do_set_time_init</a> from sm_set_time.o(.text.do_set_time_init) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_temp)
 <LI><a href="#[16]">do_set_time_init</a> from sm_set_time.o(.text.do_set_time_init) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_time)
 <LI><a href="#[16]">do_set_time_init</a> from sm_set_time.o(.text.do_set_time_init) referenced 2 times from sm_clock_display.o(.data.sm_trans_clock_display_week)
 <LI><a href="#[2e]">do_set_time_min</a> from sm_set_time.o(.text.do_set_time_min) referenced 2 times from sm_set_time.o(.data.sm_trans_set_time_hour)
 <LI><a href="#[2e]">do_set_time_min</a> from sm_set_time.o(.text.do_set_time_min) referenced 8 times from sm_set_time.o(.data.sm_trans_set_time_min)
 <LI><a href="#[30]">do_set_time_sec</a> from sm_set_time.o(.text.do_set_time_sec) referenced 2 times from sm_set_time.o(.data.sm_trans_set_time_min)
 <LI><a href="#[30]">do_set_time_sec</a> from sm_set_time.o(.text.do_set_time_sec) referenced 2 times from sm_set_time.o(.data.sm_trans_set_time_sec)
 <LI><a href="#[10]">do_stop_alarm</a> from remote_control.o(.text.do_stop_alarm) referenced 2 times from remote_control.o(.data.remote_control_proc)
 <LI><a href="#[39]">do_stop_watch_init</a> from sm_stop_watch.o(.text.do_stop_watch_init) referenced 2 times from sm_timer.o(.data.sm_trans_timer_set_hour)
 <LI><a href="#[39]">do_stop_watch_init</a> from sm_stop_watch.o(.text.do_stop_watch_init) referenced 2 times from sm_timer.o(.data.sm_trans_timer_set_min)
 <LI><a href="#[39]">do_stop_watch_init</a> from sm_stop_watch.o(.text.do_stop_watch_init) referenced 2 times from sm_timer.o(.data.sm_trans_timer_set_sec)
 <LI><a href="#[32]">do_stop_watch_pause</a> from sm_stop_watch.o(.text.do_stop_watch_pause) referenced 2 times from sm_stop_watch.o(.data.sm_trans_stop_watch_pause)
 <LI><a href="#[32]">do_stop_watch_pause</a> from sm_stop_watch.o(.text.do_stop_watch_pause) referenced 2 times from sm_stop_watch.o(.data.sm_trans_stop_watch_run)
 <LI><a href="#[33]">do_stop_watch_run</a> from sm_stop_watch.o(.text.do_stop_watch_run) referenced 2 times from sm_stop_watch.o(.data.sm_trans_stop_watch_pause)
 <LI><a href="#[33]">do_stop_watch_run</a> from sm_stop_watch.o(.text.do_stop_watch_run) referenced 2 times from sm_stop_watch.o(.data.sm_trans_stop_watch_run)
 <LI><a href="#[33]">do_stop_watch_run</a> from sm_stop_watch.o(.text.do_stop_watch_run) referenced 2 times from sm_stop_watch.o(.data.sm_trans_stop_watch_stop)
 <LI><a href="#[31]">do_stop_watch_stop</a> from sm_stop_watch.o(.text.do_stop_watch_stop) referenced 2 times from sm_stop_watch.o(.data.sm_trans_stop_watch_init)
 <LI><a href="#[31]">do_stop_watch_stop</a> from sm_stop_watch.o(.text.do_stop_watch_stop) referenced 2 times from sm_stop_watch.o(.data.sm_trans_stop_watch_pause)
 <LI><a href="#[25]">do_timer_init</a> from sm_timer.o(.text.do_timer_init) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_baoshi)
 <LI><a href="#[25]">do_timer_init</a> from sm_timer.o(.text.do_timer_init) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_beeper)
 <LI><a href="#[25]">do_timer_init</a> from sm_timer.o(.text.do_timer_init) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_hour12)
 <LI><a href="#[25]">do_timer_init</a> from sm_timer.o(.text.do_timer_init) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_light_mon)
 <LI><a href="#[25]">do_timer_init</a> from sm_timer.o(.text.do_timer_init) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_motion_mon)
 <LI><a href="#[25]">do_timer_init</a> from sm_timer.o(.text.do_timer_init) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_player_vol)
 <LI><a href="#[25]">do_timer_init</a> from sm_timer.o(.text.do_timer_init) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_ps)
 <LI><a href="#[25]">do_timer_init</a> from sm_timer.o(.text.do_timer_init) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_thermo)
 <LI><a href="#[25]">do_timer_init</a> from sm_timer.o(.text.do_timer_init) referenced 2 times from sm_set_param.o(.data.sm_trans_set_param_timer_snd)
 <LI><a href="#[37]">do_timer_pause</a> from sm_timer.o(.text.do_timer_pause) referenced 2 times from sm_timer.o(.data.sm_trans_timer_run)
 <LI><a href="#[35]">do_timer_run</a> from sm_timer.o(.text.do_timer_run) referenced 2 times from sm_timer.o(.data.sm_trans_timer_pause)
 <LI><a href="#[35]">do_timer_run</a> from sm_timer.o(.text.do_timer_run) referenced 2 times from sm_timer.o(.data.sm_trans_timer_set_sec)
 <LI><a href="#[34]">do_timer_set_hour</a> from sm_timer.o(.text.do_timer_set_hour) referenced 2 times from sm_timer.o(.data.sm_trans_timer_init)
 <LI><a href="#[34]">do_timer_set_hour</a> from sm_timer.o(.text.do_timer_set_hour) referenced 8 times from sm_timer.o(.data.sm_trans_timer_set_hour)
 <LI><a href="#[34]">do_timer_set_hour</a> from sm_timer.o(.text.do_timer_set_hour) referenced 2 times from sm_timer.o(.data.sm_trans_timer_set_sec)
 <LI><a href="#[34]">do_timer_set_hour</a> from sm_timer.o(.text.do_timer_set_hour) referenced 2 times from sm_timer.o(.data.sm_trans_timer_stop)
 <LI><a href="#[38]">do_timer_set_min</a> from sm_timer.o(.text.do_timer_set_min) referenced 2 times from sm_timer.o(.data.sm_trans_timer_set_hour)
 <LI><a href="#[38]">do_timer_set_min</a> from sm_timer.o(.text.do_timer_set_min) referenced 8 times from sm_timer.o(.data.sm_trans_timer_set_min)
 <LI><a href="#[3a]">do_timer_set_sec</a> from sm_timer.o(.text.do_timer_set_sec) referenced 2 times from sm_timer.o(.data.sm_trans_timer_set_min)
 <LI><a href="#[3a]">do_timer_set_sec</a> from sm_timer.o(.text.do_timer_set_sec) referenced 10 times from sm_timer.o(.data.sm_trans_timer_set_sec)
 <LI><a href="#[36]">do_timer_stop</a> from sm_timer.o(.text.do_timer_stop) referenced 2 times from sm_timer.o(.data.sm_trans_timer_pause)
 <LI><a href="#[36]">do_timer_stop</a> from sm_timer.o(.text.do_timer_stop) referenced 2 times from sm_timer.o(.data.sm_trans_timer_run)
 <LI><a href="#[36]">do_timer_stop</a> from sm_timer.o(.text.do_timer_stop) referenced 2 times from sm_timer.o(.data.sm_trans_timer_stop)
 <LI><a href="#[82]">fputc</a> from stdio_ext.o(.text.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[70]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[88]">null_proc</a> from task.o(.text.null_proc) referenced 5 times from task.o(.rodata.task_procs)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[2ec]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2ed]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2ee]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ef]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2f0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2f1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_inc_1ms
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2f2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_init
</UL>

<P><STRONG><a name="[2f3]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2f4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_run
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_SystemClock_Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Set_WDG
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_temperature
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[2f6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_AT_Cmd
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_show_string
</UL>

<P><STRONG><a name="[1cf]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_search_cmd_by_name
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_motion_sensor
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_config
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[92]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_player
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_fah
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_fah
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_fah
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_fah
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_fah
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light
</UL>

<P><STRONG><a name="[2f7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2f8]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2f9]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2fa]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[97]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2fb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[a1]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[a4]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[2fc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc.o(.text.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ADC1_2_IRQHandler &rArr; HAL_ADC_IRQHandler &rArr; HAL_ADC_LevelOutOfWindowCallback &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(.text.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[a8]"></a>ADC_Enable</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Init
</UL>

<P><STRONG><a name="[a9]"></a>BSP_ACC_Init</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, acc.o(.text.BSP_ACC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BSP_ACC_Init &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Read_Int_Status
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Threshold_Set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>BSP_ACC_Power_Off</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, acc.o(.text.BSP_ACC_Power_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BSP_ACC_Power_Off &rArr; BSP_Read_Int_Status &rArr; OUTLINED_FUNCTION_3 &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Read_Int_Status
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_set_th
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_inc_th
</UL>

<P><STRONG><a name="[b4]"></a>BSP_ACC_Power_On</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, acc.o(.text.BSP_ACC_Power_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = BSP_ACC_Power_On &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Read_Int_Status
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Threshold_Set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_set_th
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_inc_th
</UL>

<P><STRONG><a name="[ae]"></a>BSP_ACC_Threshold_Set</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, acc.o(.text.BSP_ACC_Threshold_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_ACC_Threshold_Set &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_On
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_set_th
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_inc_th
</UL>

<P><STRONG><a name="[b6]"></a>BSP_ADC1_Get_Value</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, adc.o(.text.BSP_ADC1_Get_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_ADC1_Get_Value
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_cal_90
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_cal_65
</UL>

<P><STRONG><a name="[b9]"></a>BSP_ADC1_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, adc.o(.text.BSP_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BSP_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>BSP_ADC1_Set_WDG</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, adc.o(.text.BSP_ADC1_Set_WDG))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_ADC1_Set_WDG &rArr; HAL_ADC_AnalogWDGConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_init
</UL>

<P><STRONG><a name="[c0]"></a>BSP_ADC1_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(.text.BSP_ADC1_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_ADC1_Start &rArr; HAL_ADC_Start_IT &rArr; OUTLINED_FUNCTION_0 &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_mon_start
</UL>

<P><STRONG><a name="[c2]"></a>BSP_ADC2_Get_Value</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, adc.o(.text.BSP_ADC2_Get_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_ADC2_Get_Value &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cal_100
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cal_0
</UL>

<P><STRONG><a name="[c5]"></a>BSP_ADC2_Init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, adc.o(.text.BSP_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BSP_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>BSP_Blue_Tooth_Init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, blue_tooth.o(.text.BSP_Blue_Tooth_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BSP_Blue_Tooth_Init &rArr; BSP_Blue_Tooth_Rst &rArr; BSP_Blue_Tooth_AT_Cmd &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_Rst
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>BSP_Blue_Tooth_Rst</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, blue_tooth.o(.text.BSP_Blue_Tooth_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_Blue_Tooth_Rst &rArr; BSP_Blue_Tooth_AT_Cmd &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_AT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_Init
</UL>

<P><STRONG><a name="[cc]"></a>BSP_DS3231_Alarm_Get_Date</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Get_Date))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
</UL>

<P><STRONG><a name="[ce]"></a>BSP_DS3231_Alarm_Get_Hour</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Get_Hour))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_get_hour
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
</UL>

<P><STRONG><a name="[e7]"></a>BSP_DS3231_Alarm_Get_Hour_12</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Get_Hour_12))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
</UL>

<P><STRONG><a name="[d0]"></a>BSP_DS3231_Alarm_Get_Min</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Get_Min))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
</UL>

<P><STRONG><a name="[d3]"></a>BSP_DS3231_Alarm_Get_Mode</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Get_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_DS3231_Alarm_Get_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Mode_Str
</UL>

<P><STRONG><a name="[d2]"></a>BSP_DS3231_Alarm_Get_Mode_Str</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Get_Mode_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_DS3231_Alarm_Get_Mode_Str &rArr; BSP_DS3231_Alarm_Get_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
</UL>

<P><STRONG><a name="[d4]"></a>BSP_DS3231_Alarm_Get_Sec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Get_Sec))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
</UL>

<P><STRONG><a name="[d5]"></a>BSP_DS3231_Alarm_Set_Hour</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Set_Hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_DS3231_Alarm_Set_Hour &rArr; _ds3231_set_hour
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_set_hour
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_sync_to_rtc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
</UL>

<P><STRONG><a name="[d7]"></a>BSP_DS3231_Alarm_Set_Hour_12</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Set_Hour_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_DS3231_Alarm_Set_Hour_12 &rArr; _ds3231_set_hour_12 &rArr; _ds3231_set_hour
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_set_hour_12
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
</UL>

<P><STRONG><a name="[1fc]"></a>BSP_DS3231_Alarm_Set_Min</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Set_Min))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_sync_to_rtc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
</UL>

<P><STRONG><a name="[1fb]"></a>BSP_DS3231_Alarm_Set_Mode</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_DS3231_Alarm_Set_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_sync_to_rtc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
</UL>

<P><STRONG><a name="[d9]"></a>BSP_DS3231_Alarm_Set_Sec</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ds3231.o(.text.BSP_DS3231_Alarm_Set_Sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_DS3231_Alarm_Set_Sec
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
</UL>

<P><STRONG><a name="[1fe]"></a>BSP_DS3231_Clr_Alarm_Int_Flag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Clr_Alarm_Int_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_sync_to_rtc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
</UL>

<P><STRONG><a name="[db]"></a>BSP_DS3231_Date_Get_Date</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Date_Get_Date))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_date
</UL>

<P><STRONG><a name="[2e0]"></a>BSP_DS3231_Date_Get_Day</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Date_Get_Day))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_date
</UL>

<P><STRONG><a name="[dc]"></a>BSP_DS3231_Date_Get_Month</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Date_Get_Month))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_date
</UL>

<P><STRONG><a name="[2df]"></a>BSP_DS3231_Date_Get_Year</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Date_Get_Year))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_date
</UL>

<P><STRONG><a name="[dd]"></a>BSP_DS3231_Date_Set_Date</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ds3231.o(.text.BSP_DS3231_Date_Set_Date))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_DS3231_Date_Set_Date &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_date
</UL>

<P><STRONG><a name="[2e1]"></a>BSP_DS3231_Date_Set_Day</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Date_Set_Day))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_date
</UL>

<P><STRONG><a name="[df]"></a>BSP_DS3231_Date_Set_Month</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Date_Set_Month))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_date
</UL>

<P><STRONG><a name="[e1]"></a>BSP_DS3231_Date_Set_Year</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Date_Set_Year))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_date
</UL>

<P><STRONG><a name="[e2]"></a>BSP_DS3231_Dump</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, ds3231.o(.text.BSP_DS3231_Dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_DS3231_Dump &rArr; BSP_DS3231_Alarm_Get_Mode_Str &rArr; BSP_DS3231_Alarm_Get_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Get_Hour
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Sec
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Mode_Str
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Min
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Hour_12
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Hour
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Date
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
</UL>

<P><STRONG><a name="[1fd]"></a>BSP_DS3231_Enable_Alarm_Int</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Enable_Alarm_Int))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_sync_to_rtc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
</UL>

<P><STRONG><a name="[e8]"></a>BSP_DS3231_Get_Temperature</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ds3231.o(.text.BSP_DS3231_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_DS3231_Get_Temperature &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_fah
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_cen
</UL>

<P><STRONG><a name="[e9]"></a>BSP_DS3231_Init</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, ds3231.o(.text.BSP_DS3231_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BSP_DS3231_Init &rArr; _ds3231_dump_raw &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Set_Hour_12
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Set_Hour
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Get_Hour
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Read_Data
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Hour_12
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Hour_12
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_dump_raw
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>BSP_DS3231_Read_Data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ds3231.o(.text.BSP_DS3231_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_fah
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_cen
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_sync_to_rtc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds3231.o(.text.BSP_DS3231_Dump)
</UL>
<P><STRONG><a name="[2de]"></a>BSP_DS3231_Set_En32khz</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Set_En32khz))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_32768HZ
</UL>

<P><STRONG><a name="[20c]"></a>BSP_DS3231_Test_Alarm_Int_Flag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Test_Alarm_Int_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
</UL>

<P><STRONG><a name="[e3]"></a>BSP_DS3231_Time_Get_Hour</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Time_Get_Hour))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_get_hour
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
</UL>

<P><STRONG><a name="[ef]"></a>BSP_DS3231_Time_Get_Min</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Time_Get_Min))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
</UL>

<P><STRONG><a name="[f0]"></a>BSP_DS3231_Time_Get_Sec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Time_Get_Sec))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
</UL>

<P><STRONG><a name="[ed]"></a>BSP_DS3231_Time_Set_Hour</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Time_Set_Hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_DS3231_Time_Set_Hour &rArr; _ds3231_set_hour
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_set_hour
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
</UL>

<P><STRONG><a name="[ec]"></a>BSP_DS3231_Time_Set_Hour_12</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Time_Set_Hour_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_DS3231_Time_Set_Hour_12 &rArr; _ds3231_set_hour_12 &rArr; _ds3231_set_hour
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_set_hour_12
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
</UL>

<P><STRONG><a name="[f1]"></a>BSP_DS3231_Time_Set_Min</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Time_Set_Min))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
</UL>

<P><STRONG><a name="[f2]"></a>BSP_DS3231_Time_Set_Sec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ds3231.o(.text.BSP_DS3231_Time_Set_Sec))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
</UL>

<P><STRONG><a name="[ee]"></a>BSP_DS3231_Write_Data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ds3231.o(.text.BSP_DS3231_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BSP_DS3231_Write_Data &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_date
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_sync_to_rtc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
</UL>

<P><STRONG><a name="[2be]"></a>BSP_GPIO_Init</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, gpio.o(.text.BSP_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>BSP_GPIO_Power_33_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text.BSP_GPIO_Power_33_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_33_enable
</UL>

<P><STRONG><a name="[f4]"></a>BSP_GPIO_Power_33_Enabled</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text.BSP_GPIO_Power_33_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GPIO_Power_33_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_33_enabled
</UL>

<P><STRONG><a name="[f7]"></a>BSP_GPIO_Power_490_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text.BSP_GPIO_Power_490_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_490_enable
</UL>

<P><STRONG><a name="[f8]"></a>BSP_GPIO_Power_490_Enabled</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text.BSP_GPIO_Power_490_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GPIO_Power_490_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_490_enabled
</UL>

<P><STRONG><a name="[f9]"></a>BSP_GPIO_Power_50_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text.BSP_GPIO_Power_50_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_50_enable
</UL>

<P><STRONG><a name="[fa]"></a>BSP_GPIO_Power_50_Enabled</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text.BSP_GPIO_Power_50_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GPIO_Power_50_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_50_enabled
</UL>

<P><STRONG><a name="[fb]"></a>BSP_GPIO_Power_IV18_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text.BSP_GPIO_Power_IV18_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_iv18_enable
</UL>

<P><STRONG><a name="[fc]"></a>BSP_GPIO_Power_IV18_Enabled</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text.BSP_GPIO_Power_IV18_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GPIO_Power_IV18_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_iv18_enabled
</UL>

<P><STRONG><a name="[fd]"></a>BSP_I2C_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c.o(.text.BSP_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_I2C_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>BSP_I2C_Read</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, i2c.o(.text.BSP_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Quit_Busy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Read_Data
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_dump_raw
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Threshold_Set
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[73]"></a>BSP_I2C_Write</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, i2c.o(.text.BSP_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Quit_Busy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BSP_I2C_Write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_Off
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Write_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acc.o(.text.BSP_ACC_Threshold_Set)
</UL>
<P><STRONG><a name="[258]"></a>BSP_IV18_Clr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iv18.o(.text.BSP_IV18_Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IV18_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_enter_powersave
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
</UL>

<P><STRONG><a name="[259]"></a>BSP_IV18_Clr_Blink</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iv18.o(.text.BSP_IV18_Clr_Blink))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>

<P><STRONG><a name="[25a]"></a>BSP_IV18_Clr_DP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iv18.o(.text.BSP_IV18_Clr_DP))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_dp
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>

<P><STRONG><a name="[106]"></a>BSP_IV18_Init</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, iv18.o(.text.BSP_IV18_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_IV18_Init &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Dig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>BSP_IV18_Load_Data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iv18.o(.text.BSP_IV18_Load_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_IV18_Load_Data &rArr; BSP_IV18_Show_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Show_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Scan
</UL>

<P><STRONG><a name="[109]"></a>BSP_IV18_Scan</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, iv18.o(.text.BSP_IV18_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_IV18_Scan &rArr; BSP_IV18_Load_Data &rArr; BSP_IV18_Show_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Load_Data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Show_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>BSP_IV18_Set_Blink</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iv18.o(.text.BSP_IV18_Set_Blink))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo_unit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_player_vol
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_hour12
</UL>
<BR>[Address Reference Count : 2]<UL><LI> display.o(.text.display_format_param_beeper)
<LI> display.o(.text.display_format_power)
</UL>
<P><STRONG><a name="[7d]"></a>BSP_IV18_Set_DP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iv18.o(.text.BSP_IV18_Set_DP))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_dp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.text.display_format_timer)
</UL>
<P><STRONG><a name="[7b]"></a>BSP_IV18_Set_Dig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iv18.o(.text.BSP_IV18_Set_Dig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IV18_Set_Dig
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_show_string
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_dig
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_power
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_motion_mon
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>
<BR>[Address Reference Count : 6]<UL><LI> display.o(.text.display_format_timer)
<LI> display.o(.text.display_format_clock)
<LI> display.o(.text.display_format_param_beeper)
<LI> display.o(.text.display_format_thermo_unit)
<LI> display.o(.text.display_format_hour12)
<LI> display.o(.text.display_format_light_mon)
</UL>
<P><STRONG><a name="[10a]"></a>BSP_Key_Init</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, key.o(.text.BSP_Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_Key_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>BSP_Key_Mod_Pressed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, key.o(.text.BSP_Key_Mod_Pressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Key_Mod_Pressed
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_proc
</UL>

<P><STRONG><a name="[10c]"></a>BSP_Key_Set_Pressed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, key.o(.text.BSP_Key_Set_Pressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Key_Set_Pressed
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_proc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_factory_reset
</UL>

<P><STRONG><a name="[10d]"></a>BSP_MP3_Dump_Msg</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, mp3.o(.text.BSP_MP3_Dump_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Wait_Response
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Send_Message
</UL>

<P><STRONG><a name="[2ce]"></a>BSP_MP3_Get_Max_Volume</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mp3.o(.text.BSP_MP3_Get_Max_Volume))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_set_vol
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_inc_vol
</UL>

<P><STRONG><a name="[2cf]"></a>BSP_MP3_Get_Min_Volume</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mp3.o(.text.BSP_MP3_Get_Min_Volume))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_set_vol
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_inc_vol
</UL>

<P><STRONG><a name="[10e]"></a>BSP_MP3_Init</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, mp3.o(.text.BSP_MP3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_MP3_Init &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Reset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Wait_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>BSP_MP3_Play_Dir_File</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mp3.o(.text.BSP_MP3_Play_Dir_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_MP3_Play_Dir_File &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Send_Message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Fill_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_scan
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_sequence_start
</UL>

<P><STRONG><a name="[10f]"></a>BSP_MP3_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mp3.o(.text.BSP_MP3_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MP3_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Fill_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Init
</UL>

<P><STRONG><a name="[117]"></a>BSP_MP3_Set_Volume</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mp3.o(.text.BSP_MP3_Set_Volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BSP_MP3_Set_Volume &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Send_Message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Fill_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_set_vol
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_inc_vol
</UL>

<P><STRONG><a name="[118]"></a>BSP_MP3_Stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mp3.o(.text.BSP_MP3_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BSP_MP3_Stop &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Send_Message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Fill_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_sequence_stop
</UL>

<P><STRONG><a name="[2bf]"></a>BSP_PWR_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwr.o(.text.BSP_PWR_Init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>BSP_PWR_Sleep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwr.o(.text.BSP_PWR_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_PWR_Sleep &rArr; HAL_PWR_EnterSTOPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_enter_powersave
</UL>

<P><STRONG><a name="[11c]"></a>BSP_PWR_SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 96 bytes, pwr.o(.text.BSP_PWR_SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_PWR_SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>BSP_ROM_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rom.o(.text.BSP_ROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_ROM_Init &rArr; _rom_dump &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>BSP_ROM_Read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rom.o(.text.BSP_ROM_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_dump
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read
</UL>

<P><STRONG><a name="[123]"></a>BSP_ROM_Write</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, rom.o(.text.BSP_ROM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BSP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>

<P><STRONG><a name="[b1]"></a>BSP_Read_Int_Status</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, acc.o(.text.BSP_Read_Int_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_Read_Int_Status &rArr; OUTLINED_FUNCTION_3 &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_scan
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_Off
</UL>

<P><STRONG><a name="[127]"></a>BSP_TIM1_Init</STRONG> (Thumb, 232 bytes, Stack size 120 bytes, tim.o(.text.BSP_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BSP_TIM1_Init &rArr; BSP_TIM1_Start &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>BSP_TIM1_Set_Duty_Cycle</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, tim.o(.text.BSP_TIM1_Set_Duty_Cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_TIM1_Set_Duty_Cycle &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_brightness
</UL>

<P><STRONG><a name="[12f]"></a>BSP_TIM1_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tim.o(.text.BSP_TIM1_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_TIM1_Start &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Init
</UL>

<P><STRONG><a name="[133]"></a>BSP_TIM1_Start_Beeper</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tim.o(.text.BSP_TIM1_Start_Beeper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_TIM1_Start_Beeper &rArr; BSP_TIM1_Start_PMW &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start_PMW
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_beep_beep
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_beep
</UL>

<P><STRONG><a name="[134]"></a>BSP_TIM1_Start_PMW</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tim.o(.text.BSP_TIM1_Start_PMW))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TIM1_Start_PMW &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_on
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start_Beeper
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_set_enable
</UL>

<P><STRONG><a name="[135]"></a>BSP_TIM1_Stop_PMW</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tim.o(.text.BSP_TIM1_Stop_PMW))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TIM1_Stop_PMW &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_off
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_set_enable
</UL>

<P><STRONG><a name="[136]"></a>BSP_TIM2_Init</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, tim.o(.text.BSP_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BSP_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>BSP_TIM3_Init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tim.o(.text.BSP_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSP_TIM3_Init &rArr; OUTLINED_FUNCTION_0 &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>BSP_TIM3_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tim.o(.text.BSP_TIM3_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TIM3_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_mon_start
</UL>

<P><STRONG><a name="[13d]"></a>BSP_TIM4_Init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, tim.o(.text.BSP_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSP_TIM4_Init &rArr; OUTLINED_FUNCTION_0 &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>BSP_TIM4_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tim.o(.text.BSP_TIM4_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TIM4_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_on
</UL>

<P><STRONG><a name="[13f]"></a>BSP_TIM4_Stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tim.o(.text.BSP_TIM4_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_TIM4_Stop &rArr; HAL_TIM_Base_Stop_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_off
</UL>

<P><STRONG><a name="[141]"></a>BSP_USART1_Get_Char</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, usart.o(.text.BSP_USART1_Get_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_USART1_Get_Char &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_run
</UL>

<P><STRONG><a name="[143]"></a>BSP_USART1_Transmit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text.BSP_USART1_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_run
</UL>

<P><STRONG><a name="[145]"></a>BSP_USART1_Try_Get_Char</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart.o(.text.BSP_USART1_Try_Get_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_USART1_Try_Get_Char &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_run
</UL>

<P><STRONG><a name="[146]"></a>BSP_USART1_UART_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(.text.BSP_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSP_USART1_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_1 &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>BSP_USART2_Receive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text.BSP_USART2_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_USART2_Receive &rArr; BSP_USART_Receive &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Wait_Response
</UL>

<P><STRONG><a name="[115]"></a>BSP_USART2_Transmit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text.BSP_USART2_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_USART2_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Send_Message
</UL>

<P><STRONG><a name="[149]"></a>BSP_USART2_UART_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(.text.BSP_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSP_USART2_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_1 &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>BSP_USART3_Receive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text.BSP_USART3_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_USART3_Receive &rArr; BSP_USART_Receive &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_run
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_AT_Cmd
</UL>

<P><STRONG><a name="[c8]"></a>BSP_USART3_Transmit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text.BSP_USART3_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_USART3_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_run
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_AT_Cmd
</UL>

<P><STRONG><a name="[14a]"></a>BSP_USART3_UART_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(.text.BSP_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSP_USART3_UART_Init &rArr; OUTLINED_FUNCTION_0 &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_1 &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, extint.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; alarm_scan &rArr; alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, extint.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; alarm_scan &rArr; alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, extint.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; alarm_scan &rArr; alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, extint.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, stm32f1xx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Init
</UL>

<P><STRONG><a name="[153]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc_ex.o(.text.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_ADC_AnalogWDGConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_AnalogWDGConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_AnalogWDGConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Set_WDG
</UL>

<P><STRONG><a name="[bb]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Init
</UL>

<P><STRONG><a name="[152]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Get_Value
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Get_Value
</UL>

<P><STRONG><a name="[a5]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_ADC_IRQHandler &rArr; HAL_ADC_LevelOutOfWindowCallback &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_ADC_Init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Init
</UL>

<P><STRONG><a name="[154]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adc.o(.text.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_LevelOutOfWindowCallback &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_PollForConversion &rArr; HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Get_Value
</UL>

<P><STRONG><a name="[c3]"></a>HAL_ADC_Start</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Start &rArr; OUTLINED_FUNCTION_0 &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Get_Value
</UL>

<P><STRONG><a name="[c1]"></a>HAL_ADC_Start_IT</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Start_IT &rArr; OUTLINED_FUNCTION_0 &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Start
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, extint.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; alarm_scan &rArr; alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_scan
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_wakeup
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_scan
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_scan
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; alarm_scan &rArr; alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extint.o(.text.EXTI9_5_IRQHandler)
</UL>
<P><STRONG><a name="[76]"></a>HAL_GPIO_Init</STRONG> (Thumb, 380 bytes, Stack size 44 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Key_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Quit_Busy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iv18.o(.text.BSP_IV18_Init)
<LI> gpio.o(.text.BSP_GPIO_Init)
</UL>
<P><STRONG><a name="[f5]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_IV18_Enabled
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_50_Enabled
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_490_Enabled
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_33_Enabled
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Key_Set_Pressed
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Key_Mod_Pressed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Quit_Busy
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_connected
</UL>

<P><STRONG><a name="[77]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_IV18_Enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_50_Enable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_490_Enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_33_Enable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Show_Data
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Quit_Busy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iv18.o(.text.BSP_IV18_Show_Data)
</UL>
<P><STRONG><a name="[a7]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_50
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[fe]"></a>HAL_I2C_Init</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_80
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_76
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_59
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, stm32f1xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_73
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_64
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_49
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_38
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Read
</UL>

<P><STRONG><a name="[105]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_73
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_64
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_50
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_49
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_42
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Write
</UL>

<P><STRONG><a name="[161]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[180]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>HAL_InitTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[183]"></a>HAL_MspInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Key_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[aa]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Key_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[181]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f1xx_hal_pwr.o(.text.HAL_PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_EnterSTOPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_OverloadWfe
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Sleep
</UL>

<P><STRONG><a name="[14f]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>

<P><STRONG><a name="[11f]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_SystemClock_Config
</UL>

<P><STRONG><a name="[11e]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_SystemClock_Config
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Get_Char
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Get_Value
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_enter_powersave
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_timer_snd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_init
</UL>

<P><STRONG><a name="[163]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[188]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[189]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[11d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 748 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_SystemClock_Config
</UL>

<P><STRONG><a name="[184]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM4_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM3_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM2_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIMEx_PWMN_Start_IT</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_PWMN_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_PWMN_Start_IT &rArr; OUTLINED_FUNCTION_18 &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_29
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start
</UL>

<P><STRONG><a name="[128]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_46
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM2_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[196]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Start))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM3_Start
</UL>

<P><STRONG><a name="[138]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM2_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM4_Start
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_Stop_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_52
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM4_Stop
</UL>

<P><STRONG><a name="[129]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; OUTLINED_FUNCTION_51 &rArr; TIM_TI1_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_69
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_51
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_40
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM4_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM3_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Init
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_49
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; OUTLINED_FUNCTION_30
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_49
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, tim.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Init
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_70
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_57
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Set_Duty_Cycle
</UL>

<P><STRONG><a name="[12a]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Init &rArr; OUTLINED_FUNCTION_7 &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_46
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Init
</UL>

<P><STRONG><a name="[1af]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_TIM_SlaveConfigSynchro</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_SlaveConfigSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_SlaveConfigSynchro &rArr; OUTLINED_FUNCTION_38 &rArr; TIM_SlaveTimer_SetConfig &rArr; TIM_TI1_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_56
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_40
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_38
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM2_Init
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_UART_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Init &rArr; OUTLINED_FUNCTION_1 &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_UART_MspInit</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[142]"></a>HAL_UART_Receive</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Get_Char
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Try_Get_Char
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Receive
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[14c]"></a>HAL_UART_Transmit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Transmit
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>PrintBsp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.PrintBsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PrintBsp &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[41]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; ticks_inc_1ms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_inc_1ms
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tim.o(.text.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_CC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; OUTLINED_FUNCTION_30
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Stop_PMW
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start_PMW
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tim.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = TIM2_IRQHandler &rArr; clock_inc_ms39 &rArr; clock_refresh_display &rArr; display_format_clock &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_inc_ms39
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_ms39
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tim.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM4_IRQHandler &rArr; BSP_IV18_Scan &rArr; BSP_IV18_Load_Data &rArr; BSP_IV18_Show_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Scan
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e7]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[131]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(.text.TIM_CCxNChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Stop_PMW
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start_PMW
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Set_Duty_Cycle
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
</UL>

<P><STRONG><a name="[1ac]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_68
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[6b]"></a>USART2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USART3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>_rom_dump</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, rom.o(.text._rom_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _rom_dump &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Init
</UL>

<P><STRONG><a name="[297]"></a>alarm0_get_cnt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, alarm.o(.text.alarm0_get_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_sel
</UL>

<P><STRONG><a name="[28f]"></a>alarm0_get_hit_index</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, alarm.o(.text.alarm0_get_hit_index))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm0
</UL>

<P><STRONG><a name="[295]"></a>alarm0_inc_hour</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, alarm.o(.text.alarm0_inc_hour))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_hour
</UL>

<P><STRONG><a name="[296]"></a>alarm0_inc_min</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, alarm.o(.text.alarm0_inc_min))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_min
</UL>

<P><STRONG><a name="[298]"></a>alarm0_inc_snd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, alarm.o(.text.alarm0_inc_snd))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
</UL>

<P><STRONG><a name="[1f4]"></a>alarm0_play_snd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, alarm.o(.text.alarm0_play_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = alarm0_play_snd &rArr; player_play_snd &rArr; player_play_sequence_start &rArr; BSP_MP3_Play_Dir_File &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_snd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm0
</UL>

<P><STRONG><a name="[1f6]"></a>alarm0_set_enable</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, alarm.o(.text.alarm0_set_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = alarm0_set_enable &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_day
</UL>

<P><STRONG><a name="[1f7]"></a>alarm0_stop_snd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, alarm.o(.text.alarm0_stop_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = alarm0_stop_snd &rArr; player_stop_play &rArr; player_play_sequence_stop &rArr; BSP_MP3_Stop &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_stop_play
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_is_playing
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_sel
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm0
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_alarm
</UL>

<P><STRONG><a name="[1ff]"></a>alarm0_test_enable</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, alarm.o(.text.alarm0_test_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = alarm0_test_enable &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_day
</UL>

<P><STRONG><a name="[200]"></a>alarm1_play_snd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, alarm.o(.text.alarm1_play_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = alarm1_play_snd &rArr; player_report_clk &rArr; player_play_sequence_start &rArr; BSP_MP3_Play_Dir_File &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm1
</UL>

<P><STRONG><a name="[29b]"></a>alarm1_set_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, alarm.o(.text.alarm1_set_enable))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_baoshi
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[202]"></a>alarm1_stop_snd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, alarm.o(.text.alarm1_stop_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = alarm1_stop_snd &rArr; player_stop_play &rArr; player_play_sequence_stop &rArr; BSP_MP3_Stop &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_stop_play
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_is_playing
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm1
</UL>

<P><STRONG><a name="[262]"></a>alarm1_test_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, alarm.o(.text.alarm1_test_enable))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_baoshi
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_param
</UL>

<P><STRONG><a name="[1f2]"></a>alarm_bubble_sort</STRONG> (Thumb, 100 bytes, Stack size 36 bytes, alarm.o(.text.alarm_bubble_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = alarm_bubble_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_find_curr
</UL>

<P><STRONG><a name="[204]"></a>alarm_dump</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, alarm.o(.text.alarm_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = alarm_dump &rArr; OUTLINED_FUNCTION_2 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_resync_rtc
</UL>

<P><STRONG><a name="[206]"></a>alarm_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, alarm.o(.text.alarm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = alarm_init &rArr; alarm_load_config &rArr; alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_load_config
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_dump
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[207]"></a>alarm_load_config</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, alarm.o(.text.alarm_load_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = alarm_load_config &rArr; alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_sync_to_rtc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_find_curr
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
</UL>

<P><STRONG><a name="[89]"></a>alarm_proc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, alarm.o(.text.alarm_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = alarm_proc &rArr; sm_run &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.rodata.task_procs)
</UL>
<P><STRONG><a name="[20a]"></a>alarm_resync_rtc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, alarm.o(.text.alarm_resync_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = alarm_resync_rtc &rArr; alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_dump
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_find_curr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_sec
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_min
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_hour
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm
</UL>

<P><STRONG><a name="[1d6]"></a>alarm_save_config</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, alarm.o(.text.alarm_save_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = alarm_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_sync_to_rtc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_find_curr
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_baoshi
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_hour
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_day
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm
</UL>

<P><STRONG><a name="[15d]"></a>alarm_scan</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, alarm.o(.text.alarm_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = alarm_scan &rArr; alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Test_Alarm_Int_Flag
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Read_Data
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Clr_Alarm_Int_Flag
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_wakeup
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_date
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_dump
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_find_curr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[22e]"></a>alarm_show</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, alarm.o(.text.alarm_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alarm_show
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_alarm
</UL>

<P><STRONG><a name="[20e]"></a>beeper_beep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, beeper.o(.text.beeper_beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = beeper_beep &rArr; BSP_TIM1_Start_Beeper &rArr; BSP_TIM1_Start_PMW &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start_Beeper
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_beeper
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_proc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_mod_proc
</UL>

<P><STRONG><a name="[20f]"></a>beeper_beep_beep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, beeper.o(.text.beeper_beep_beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = beeper_beep_beep &rArr; BSP_TIM1_Start_Beeper &rArr; BSP_TIM1_Start_PMW &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start_Beeper
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_beeper
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_stop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_common_show_function
</UL>

<P><STRONG><a name="[210]"></a>beeper_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, beeper.o(.text.beeper_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = beeper_init &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Stop_PMW
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[211]"></a>beeper_save_config</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, beeper.o(.text.beeper_save_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = beeper_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_beeper
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_beeper
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[230]"></a>beeper_set_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, beeper.o(.text.beeper_set_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_beeper
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_beeper
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[22f]"></a>beeper_test_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, beeper.o(.text.beeper_test_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_beeper
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_param_beeper
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_beeper
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_param
</UL>

<P><STRONG><a name="[2c4]"></a>button_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, button.o(.text.button_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[212]"></a>button_is_factory_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, button.o(.text.button_is_factory_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = button_is_factory_reset &rArr; BSP_Key_Set_Pressed
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Key_Set_Pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[86]"></a>button_mod_proc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, button.o(.text.button_mod_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = button_mod_proc &rArr; sm_run &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_beep
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.rodata.task_procs)
</UL>
<P><STRONG><a name="[87]"></a>button_mod_set_proc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, button.o(.text.button_mod_set_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = button_mod_set_proc &rArr; sm_run &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.rodata.task_procs)
</UL>
<P><STRONG><a name="[84]"></a>button_scan_proc</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, button.o(.text.button_scan_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = button_scan_proc &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Key_Set_Pressed
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Key_Mod_Pressed
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_now_sec
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_diff_now_sec
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.rodata.task_procs)
</UL>
<P><STRONG><a name="[85]"></a>button_set_proc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, button.o(.text.button_set_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = button_set_proc &rArr; sm_run &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_beep
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.rodata.task_procs)
</UL>
<P><STRONG><a name="[25c]"></a>cext_cal_hour12</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cext.o(.text.cext_cal_hour12))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[1e4]"></a>cext_is_leap_year</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cext.o(.text.cext_is_leap_year))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[21f]"></a>cext_yymmdd_to_day</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, cext.o(.text.cext_yymmdd_to_day))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cext_yymmdd_to_day
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_year
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_month
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_date
</UL>

<P><STRONG><a name="[2ac]"></a>clock_clr_sec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text.clock_clr_sec))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_sec
</UL>

<P><STRONG><a name="[213]"></a>clock_diff_now_sec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text.clock_diff_now_sec))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_test_powersave
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_proc
</UL>

<P><STRONG><a name="[217]"></a>clock_dump</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, clock.o(.text.clock_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_dump
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[219]"></a>clock_enable_interrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clock.o(.text.clock_enable_interrupt))
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_32768HZ
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time
</UL>

<P><STRONG><a name="[253]"></a>clock_enter_console</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text.clock_enter_console))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_run
</UL>

<P><STRONG><a name="[21b]"></a>clock_enter_powersave</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock.o(.text.clock_enter_powersave))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = clock_enter_powersave &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_32768HZ
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_enter_powersave
</UL>

<P><STRONG><a name="[2d6]"></a>clock_get_date</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.clock_get_date))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[2d7]"></a>clock_get_day</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.clock_get_day))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[261]"></a>clock_get_hour</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text.clock_get_hour))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[2d8]"></a>clock_get_min</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text.clock_get_min))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[21c]"></a>clock_get_mon_date</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clock.o(.text.clock_get_mon_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_get_mon_date
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_year
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_month
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_date
</UL>

<P><STRONG><a name="[2d4]"></a>clock_get_month</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.clock_get_month))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[216]"></a>clock_get_now_sec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text.clock_get_now_sec))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_reset_timeo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_proc
</UL>

<P><STRONG><a name="[2d3]"></a>clock_get_year</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text.clock_get_year))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[21e]"></a>clock_inc_date</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, clock.o(.text.clock_inc_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clock_inc_date &rArr; cext_yymmdd_to_day
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cext_yymmdd_to_day
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_mon_date
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_date
</UL>

<P><STRONG><a name="[2aa]"></a>clock_inc_hour</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clock.o(.text.clock_inc_hour))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_hour
</UL>

<P><STRONG><a name="[2ab]"></a>clock_inc_min</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clock.o(.text.clock_inc_min))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_min
</UL>

<P><STRONG><a name="[220]"></a>clock_inc_month</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, clock.o(.text.clock_inc_month))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clock_inc_month &rArr; cext_yymmdd_to_day
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cext_yymmdd_to_day
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_mon_date
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_mon
</UL>

<P><STRONG><a name="[1eb]"></a>clock_inc_ms39</STRONG> (Thumb, 256 bytes, Stack size 20 bytes, clock.o(.text.clock_inc_ms39))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = clock_inc_ms39 &rArr; clock_refresh_display &rArr; display_format_clock &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[222]"></a>clock_inc_year</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, clock.o(.text.clock_inc_year))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clock_inc_year &rArr; cext_yymmdd_to_day
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cext_yymmdd_to_day
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_mon_date
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_year
</UL>

<P><STRONG><a name="[223]"></a>clock_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, clock.o(.text.clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = clock_init &rArr; clock_sync_from_rtc &rArr; rtc_get_date &rArr; OUTLINED_FUNCTION_0 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_date
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_from_rtc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_dump
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_factory_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21d]"></a>clock_is_leap_year</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, clock.o(.text.clock_is_leap_year))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_mon_date
</UL>

<P><STRONG><a name="[227]"></a>clock_leave_console</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clock.o(.text.clock_leave_console))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = clock_leave_console &rArr; clock_sync_from_rtc &rArr; rtc_get_date &rArr; OUTLINED_FUNCTION_0 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_32768HZ
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_from_rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_run
</UL>

<P><STRONG><a name="[228]"></a>clock_leave_powersave</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clock.o(.text.clock_leave_powersave))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = clock_leave_powersave &rArr; clock_sync_from_rtc &rArr; rtc_get_date &rArr; OUTLINED_FUNCTION_0 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_32768HZ
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_from_rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_enter_powersave
</UL>

<P><STRONG><a name="[221]"></a>clock_refresh_display</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, clock.o(.text.clock_refresh_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = clock_refresh_display &rArr; display_format_clock &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_is_on
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_ms39
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_year
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_mon
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_date
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_sec
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_min
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_hour
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_week
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_time
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_date
</UL>

<P><STRONG><a name="[1d4]"></a>clock_refresh_display_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text.clock_refresh_display_enable))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_year
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_mon
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_date
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_sec
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_min
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_hour
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_week
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_time
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_date
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[22b]"></a>clock_show</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, clock.o(.text.clock_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clock_show &rArr; console_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_clock
</UL>

<P><STRONG><a name="[226]"></a>clock_sync_from_rtc</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, clock.o(.text.clock_sync_from_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = clock_sync_from_rtc &rArr; rtc_get_date &rArr; OUTLINED_FUNCTION_0 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_32768HZ
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_date
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_leave_powersave
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_leave_console
</UL>

<P><STRONG><a name="[22c]"></a>clock_sync_to_rtc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, clock.o(.text.clock_sync_to_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = clock_sync_to_rtc &rArr; rtc_set_date &rArr; OUTLINED_FUNCTION_0 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_date
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_32768HZ
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_year
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_mon
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_date
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_sec
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_min
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_hour
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time
</UL>

<P><STRONG><a name="[83]"></a>clock_time_proc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clock.o(.text.clock_time_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = clock_time_proc &rArr; display_mon_light &rArr; display_get_light_percent &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.rodata.task_procs)
</UL>
<P><STRONG><a name="[2]"></a>con_alarm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, con_alarm.o(.text.con_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = con_alarm &rArr; alarm_show
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.cmds)
</UL>
<P><STRONG><a name="[5]"></a>con_beeper</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, con_beeper.o(.text.con_beeper))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = con_beeper &rArr; beeper_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_test_enable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_set_enable
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_save_config
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_beep_beep
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_beep
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.cmds)
</UL>
<P><STRONG><a name="[1]"></a>con_clock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, con_clock.o(.text.con_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = con_clock &rArr; clock_show &rArr; console_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.cmds)
</UL>
<P><STRONG><a name="[6]"></a>con_display</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, con_display.o(.text.con_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = con_display &rArr; display_mon_light_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_on
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_dp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_dig
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_brightness
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_off
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_test_enable
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_set_enable
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_save_config
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_dp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cal_100
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cal_0
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_is_on
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.cmds)
</UL>
<P><STRONG><a name="[0]"></a>con_help</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, con_help.o(.text.con_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = con_help &rArr; console_dump_cmd &rArr; console_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_search_cmd_by_name
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_dump_cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.cmds)
</UL>
<P><STRONG><a name="[3]"></a>con_motion_sensor</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, con_motion_sensor.o(.text.con_motion_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = con_motion_sensor &rArr; motion_sensor_inc_th &rArr; BSP_ACC_Power_On &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_scan
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_show
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_inc_th
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.cmds)
</UL>
<P><STRONG><a name="[7]"></a>con_player</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, con_player.o(.text.con_player))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = con_player &rArr; player_report_temperature &rArr; thermometer_read_fah &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_show
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_temperature
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_on
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_off
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_stop_play
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_snd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.cmds)
</UL>
<P><STRONG><a name="[4]"></a>con_power</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, con_power.o(.text.con_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = con_power &rArr; power_get_bat_voltage &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_iv18_enabled
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_cal_90
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_cal_65
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_50_enabled
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_50_enable
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_490_enabled
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_33_enabled
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_33_enable
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_iv18_enable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_490_enable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.cmds)
</UL>
<P><STRONG><a name="[24f]"></a>config_init</STRONG> (Thumb, 500 bytes, Stack size 80 bytes, config.o(.text.config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = config_init &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Read
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_is_factory_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>config_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, config.o(.text.config_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = config_read &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Read
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_config
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_load_config
</UL>

<P><STRONG><a name="[ad]"></a>config_read_int</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, config.o(.text.config_read_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Read
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_on
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_On
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_temperature
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_hour12
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_load_config
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_hour12
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_param
</UL>

<P><STRONG><a name="[20b]"></a>config_write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, config.o(.text.config_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_config
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_save_config
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_timeo_save_config
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_cal_90
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_cal_65
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_save_config
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_save_config
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cal_100
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cal_0
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_save_config
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_hour12
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_save_config
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_save_config
</UL>

<P><STRONG><a name="[23d]"></a>console_dump_cmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, console.o(.text.console_dump_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = console_dump_cmd &rArr; console_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_help
</UL>

<P><STRONG><a name="[2c2]"></a>console_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, console.o(.text.console_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>console_printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, console.o(.text.console_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = console_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_run
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_dump_cmd
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_help
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_beeper
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_quit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_cmd
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_cal_90
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_cal_65
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_show
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cal_100
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cal_0
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_show
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_show
</UL>
<BR>[Address Reference Count : 2]<UL><LI> console.o(.text.console_run)
<LI> alarm.o(.text.alarm_show)
</UL>
<P><STRONG><a name="[252]"></a>console_run</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, console.o(.text.console_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = console_run &rArr; clock_leave_console &rArr; clock_sync_from_rtc &rArr; rtc_get_date &rArr; OUTLINED_FUNCTION_0 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Get_Char
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Transmit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Try_Get_Char
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_cmd
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_leave_console
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_enter_console
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f0]"></a>console_search_cmd_by_name</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, console.o(.text.console_search_cmd_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = console_search_cmd_by_name &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_help
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_cmd
</UL>

<P><STRONG><a name="[74]"></a>debug_printf</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, debug.o(.text.debug_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Transmit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_run
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBsp
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Get_Temperature
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Set_Date
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_dump_raw
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_scan
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_scan
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_dump
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BSP_I2C_Write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_AT_Cmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_Off
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Set_Duty_Cycle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Play_Dir_File
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Dump_Msg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Wait_Response
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Send_Message
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Get_Value
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_test_powersave
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_enter_powersave
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_sequence_start
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_number_to_tune
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_dump_seq
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_fah
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_config
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_leave_powersave
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_enter_powersave
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_test_enable
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_set_enable
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_sync_to_rtc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_find_curr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_day
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_dump_msg
</UL>
<BR>[Address Reference Count : 4]<UL><LI> ds3231.o(.text.BSP_DS3231_Dump)
<LI> alarm.o(.text.alarm_dump)
<LI> clock.o(.text.clock_dump)
<LI> remote_control.o(.text.remote_control_dump_msg)
</UL>
<P><STRONG><a name="[2bc]"></a>delay_init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text.delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[238]"></a>display_cal_0</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, display.o(.text.display_cal_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = display_cal_0 &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Get_Value
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
</UL>

<P><STRONG><a name="[239]"></a>display_cal_100</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, display.o(.text.display_cal_100))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = display_cal_100 &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Get_Value
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
</UL>

<P><STRONG><a name="[257]"></a>display_clr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, display.o(.text.display_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = display_clr &rArr; BSP_IV18_Clr
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_sec
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_min
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_hour
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_run
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_timer_snd
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_thermo
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_ps
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_player_vol
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_motion_mon
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_light_mon
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_hour12
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_beeper
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_baoshi
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_sel
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_min
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_hour
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_day
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_year
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_mon
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_date
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_sec
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_min
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_hour
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_week
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_time
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_temp
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_date
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm0
</UL>

<P><STRONG><a name="[7f]"></a>display_clr_blink</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text.display_clr_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = display_clr_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Clr_Blink
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_timer_sec
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_timer_min
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_timer_hour
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_year
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_sec
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_mon
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_min
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_hour
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_date
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_snd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_sel
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_min
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_hour
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_day
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.text.display_set_blink_all)
</UL>
<P><STRONG><a name="[236]"></a>display_clr_dp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text.display_clr_dp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = display_clr_dp &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Clr_DP
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
</UL>

<P><STRONG><a name="[25b]"></a>display_enter_powersave</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, display.o(.text.display_enter_powersave))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = display_enter_powersave &rArr; display_off &rArr; BSP_TIM4_Stop &rArr; HAL_TIM_Base_Stop_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Clr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_off
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_enter_powersave
</UL>

<P><STRONG><a name="[1df]"></a>display_format_alarm0</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, display.o(.text.display_format_alarm0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = display_format_alarm0 &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cext_cal_hour12
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Dig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_DP
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Clr_DP
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_test_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_sel
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_min
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_hour
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_day
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm0
</UL>

<P><STRONG><a name="[260]"></a>display_format_alarm1</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, display.o(.text.display_format_alarm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = display_format_alarm1 &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cext_cal_hour12
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Dig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_DP
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Clr_DP
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_hour
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_test_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_baoshi
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm1
</UL>

<P><STRONG><a name="[22a]"></a>display_format_clock</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, display.o(.text.display_format_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = display_format_clock &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cext_cal_hour12
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Dig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_DP
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Clr_DP
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_show_string
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
</UL>

<P><STRONG><a name="[26b]"></a>display_format_hour12</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, display.o(.text.display_format_hour12))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = display_format_hour12 &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Blink
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_hour12
</UL>

<P><STRONG><a name="[2a2]"></a>display_format_light_mon</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, display.o(.text.display_format_light_mon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = display_format_light_mon
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_light_mon
</UL>

<P><STRONG><a name="[26c]"></a>display_format_motion_mon</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, display.o(.text.display_format_motion_mon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = display_format_motion_mon &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Dig
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_get_th
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_motion_mon
</UL>

<P><STRONG><a name="[26f]"></a>display_format_param_beeper</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, display.o(.text.display_format_param_beeper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = display_format_param_beeper
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_test_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_beeper
</UL>

<P><STRONG><a name="[270]"></a>display_format_player_vol</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, display.o(.text.display_format_player_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = display_format_player_vol
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Blink
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_get_vol
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_player_vol
</UL>

<P><STRONG><a name="[272]"></a>display_format_power</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, display.o(.text.display_format_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = display_format_power &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Dig
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_timeo
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_ps
</UL>

<P><STRONG><a name="[274]"></a>display_format_poweroff</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, display.o(.text.display_format_poweroff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = display_format_poweroff &rArr; display_set_blink_all
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_all
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_init
</UL>

<P><STRONG><a name="[276]"></a>display_format_thermo</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, display.o(.text.display_format_thermo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = display_format_thermo &rArr; thermometer_read_fah &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Dig
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Clr
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_fah
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_cen
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_get_unit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_dp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_temp
</UL>

<P><STRONG><a name="[27b]"></a>display_format_thermo_unit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, display.o(.text.display_format_thermo_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = display_format_thermo_unit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Blink
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_get_unit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_thermo
</UL>

<P><STRONG><a name="[27c]"></a>display_format_timer</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, display.o(.text.display_format_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_format_timer &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_DP
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_snd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_timer_snd
</UL>

<P><STRONG><a name="[23c]"></a>display_get_light_percent</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, display.o(.text.display_get_light_percent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = display_get_light_percent &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Get_Value
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light
</UL>

<P><STRONG><a name="[27e]"></a>display_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text.display_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = display_init &rArr; BSP_TIM1_Stop_PMW &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Stop_PMW
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229]"></a>display_is_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, display.o(.text.display_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
</UL>

<P><STRONG><a name="[27f]"></a>display_leave_powersave</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, display.o(.text.display_leave_powersave))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = display_leave_powersave &rArr; display_on &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_on
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_enter_powersave
</UL>

<P><STRONG><a name="[22d]"></a>display_mon_light</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, display.o(.text.display_mon_light))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = display_mon_light &rArr; display_get_light_percent &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_brightness
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_proc
</UL>

<P><STRONG><a name="[23b]"></a>display_mon_light_save_config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, display.o(.text.display_mon_light_save_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = display_mon_light_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_light_mon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[23a]"></a>display_mon_light_set_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, display.o(.text.display_mon_light_set_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = display_mon_light_set_enable &rArr; BSP_TIM1_Stop_PMW &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Stop_PMW
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start_PMW
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_light_mon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[232]"></a>display_mon_light_test_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, display.o(.text.display_mon_light_test_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_light_mon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_param
</UL>

<P><STRONG><a name="[234]"></a>display_off</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = display_off &rArr; BSP_TIM4_Stop &rArr; HAL_TIM_Base_Stop_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM4_Stop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Stop_PMW
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_iv18_enable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_490_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_enter_powersave
</UL>

<P><STRONG><a name="[233]"></a>display_on</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, display.o(.text.display_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = display_on &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM4_Start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Start_PMW
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_iv18_enable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_490_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_leave_powersave
</UL>

<P><STRONG><a name="[7e]"></a>display_set_blink</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text.display_set_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Blink
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_timer_sec
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_timer_min
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_timer_hour
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_year
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_sec
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_mon
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_min
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_hour
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_date
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_snd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_sel
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_min
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_hour
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_day
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.text.display_set_blink_all)
</UL>
<P><STRONG><a name="[280]"></a>display_set_blink_alarm_day</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_alarm_day))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_alarm_day &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_day
</UL>

<P><STRONG><a name="[281]"></a>display_set_blink_alarm_hour</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_alarm_hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_alarm_hour &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_hour
</UL>

<P><STRONG><a name="[282]"></a>display_set_blink_alarm_min</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_alarm_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_alarm_min &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_min
</UL>

<P><STRONG><a name="[283]"></a>display_set_blink_alarm_sel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, display.o(.text.display_set_blink_alarm_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = display_set_blink_alarm_sel &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_sel
</UL>

<P><STRONG><a name="[284]"></a>display_set_blink_alarm_snd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, display.o(.text.display_set_blink_alarm_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = display_set_blink_alarm_snd &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
</UL>

<P><STRONG><a name="[275]"></a>display_set_blink_all</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = display_set_blink_all
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_poweroff
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_stop
</UL>

<P><STRONG><a name="[285]"></a>display_set_blink_clock_date</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_clock_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_clock_date &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_date
</UL>

<P><STRONG><a name="[286]"></a>display_set_blink_clock_hour</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_clock_hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_clock_hour &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_hour
</UL>

<P><STRONG><a name="[287]"></a>display_set_blink_clock_min</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_clock_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_clock_min &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_min
</UL>

<P><STRONG><a name="[288]"></a>display_set_blink_clock_mon</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_clock_mon))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_clock_mon &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_mon
</UL>

<P><STRONG><a name="[289]"></a>display_set_blink_clock_sec</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_clock_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_clock_sec &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_sec
</UL>

<P><STRONG><a name="[28a]"></a>display_set_blink_clock_year</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_clock_year))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_clock_year &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_year
</UL>

<P><STRONG><a name="[28b]"></a>display_set_blink_timer_hour</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_timer_hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_timer_hour &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_hour
</UL>

<P><STRONG><a name="[28c]"></a>display_set_blink_timer_min</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_timer_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_timer_min &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_min
</UL>

<P><STRONG><a name="[28d]"></a>display_set_blink_timer_sec</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text.display_set_blink_timer_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_set_blink_timer_sec &rArr; display_set_blink &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_sec
</UL>

<P><STRONG><a name="[237]"></a>display_set_brightness</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, display.o(.text.display_set_brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = display_set_brightness &rArr; BSP_TIM1_Set_Duty_Cycle &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Set_Duty_Cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light
</UL>

<P><STRONG><a name="[231]"></a>display_set_dig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, display.o(.text.display_set_dig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = display_set_dig &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Dig
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
</UL>

<P><STRONG><a name="[235]"></a>display_set_dp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, display.o(.text.display_set_dp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = display_set_dp &rArr; OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_DP
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo
</UL>

<P><STRONG><a name="[28e]"></a>display_set_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, display.o(.text.display_set_mode))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_stop
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_hour
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_run
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_timer_snd
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_baoshi
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_sel
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_min
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_hour
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_day
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_year
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_mon
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_date
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_sec
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_min
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_hour
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_week
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_time
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_date
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm0
</UL>

<P><STRONG><a name="[264]"></a>display_show_string</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, display.o(.text.display_show_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = display_show_string &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Dig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_common_show_function
</UL>

<P><STRONG><a name="[18]"></a>do_clock_display_init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sm_clock_display.o(.text.do_clock_display_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = do_clock_display_init &rArr; sm_common_show_function &rArr; display_show_string &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_reset_timeo
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_50_enable
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_33_enable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_490_enable
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_poweroff
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_common_show_function
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_clock_display.o(.data.sm_trans_clock_display_time)
<LI> sm_stop_watch.o(.data.sm_trans_stop_watch_stop)
</UL>
<P><STRONG><a name="[21]"></a>do_set_alarm_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sm_set_alarm.o(.text.do_set_alarm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_set_alarm_init &rArr; sm_common_show_function &rArr; display_show_string &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_common_show_function
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_set_date.o(.data.sm_trans_set_date_year)
<LI> sm_set_date.o(.data.sm_trans_set_date_mon)
<LI> sm_set_date.o(.data.sm_trans_set_date_date)
</UL>
<P><STRONG><a name="[2f]"></a>do_set_date_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sm_set_date.o(.text.do_set_date_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_set_date_init &rArr; sm_common_show_function &rArr; display_show_string &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_common_show_function
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_set_time.o(.data.sm_trans_set_time_hour)
<LI> sm_set_time.o(.data.sm_trans_set_time_min)
<LI> sm_set_time.o(.data.sm_trans_set_time_sec)
</UL>
<P><STRONG><a name="[1b]"></a>do_set_param_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sm_set_param.o(.text.do_set_param_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_set_param_init &rArr; sm_common_show_function &rArr; display_show_string &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_common_show_function
</UL>
<BR>[Address Reference Count : 5]<UL><LI> sm_set_alarm.o(.data.sm_trans_set_alarm_sel)
<LI> sm_set_alarm.o(.data.sm_trans_set_alarm_hour)
<LI> sm_set_alarm.o(.data.sm_trans_set_alarm_min)
<LI> sm_set_alarm.o(.data.sm_trans_set_alarm_day)
<LI> sm_set_alarm.o(.data.sm_trans_set_alarm_snd)
</UL>
<P><STRONG><a name="[16]"></a>do_set_time_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sm_set_time.o(.text.do_set_time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_set_time_init &rArr; sm_common_show_function &rArr; display_show_string &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_common_show_function
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sm_clock_display.o(.data.sm_trans_clock_display_time)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_date)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_week)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_temp)
</UL>
<P><STRONG><a name="[39]"></a>do_stop_watch_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sm_stop_watch.o(.text.do_stop_watch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_stop_watch_init &rArr; sm_common_show_function &rArr; display_show_string &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display_enable
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_common_show_function
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_timer.o(.data.sm_trans_timer_set_hour)
<LI> sm_timer.o(.data.sm_trans_timer_set_min)
<LI> sm_timer.o(.data.sm_trans_timer_set_sec)
</UL>
<P><STRONG><a name="[25]"></a>do_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sm_timer.o(.text.do_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_timer_init &rArr; sm_common_show_function &rArr; display_show_string &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display_enable
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_common_show_function
</UL>
<BR>[Address Reference Count : 9]<UL><LI> sm_set_param.o(.data.sm_trans_set_param_beeper)
<LI> sm_set_param.o(.data.sm_trans_set_param_baoshi)
<LI> sm_set_param.o(.data.sm_trans_set_param_timer_snd)
<LI> sm_set_param.o(.data.sm_trans_set_param_ps)
<LI> sm_set_param.o(.data.sm_trans_set_param_thermo)
<LI> sm_set_param.o(.data.sm_trans_set_param_player_vol)
<LI> sm_set_param.o(.data.sm_trans_set_param_hour12)
<LI> sm_set_param.o(.data.sm_trans_set_param_light_mon)
<LI> sm_set_param.o(.data.sm_trans_set_param_motion_mon)
</UL>
<P><STRONG><a name="[82]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stdio_ext.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[70]"></a>main</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main &rArr; config_init &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_run
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_run
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_on
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_run
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_UART_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_UART_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_UART_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM4_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM3_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM2_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM1_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_SystemClock_Config
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Key_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC2_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[26d]"></a>motion_sensor_get_th</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motion_sensor.o(.text.motion_sensor_get_th))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_motion_mon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_param
</UL>

<P><STRONG><a name="[23e]"></a>motion_sensor_inc_th</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, motion_sensor.o(.text.motion_sensor_inc_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = motion_sensor_inc_th &rArr; BSP_ACC_Power_On &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Threshold_Set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_motion_sensor
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_motion_mon
</UL>

<P><STRONG><a name="[2c6]"></a>motion_sensor_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motion_sensor.o(.text.motion_sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = motion_sensor_init &rArr; BSP_ACC_Power_On &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Threshold_Set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29a]"></a>motion_sensor_save_config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, motion_sensor.o(.text.motion_sensor_save_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = motion_sensor_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_motion_mon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[160]"></a>motion_sensor_scan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motion_sensor.o(.text.motion_sensor_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = motion_sensor_scan &rArr; BSP_Read_Int_Status &rArr; OUTLINED_FUNCTION_3 &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Read_Int_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_motion_sensor
</UL>

<P><STRONG><a name="[299]"></a>motion_sensor_set_th</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, motion_sensor.o(.text.motion_sensor_set_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = motion_sensor_set_th &rArr; BSP_ACC_Power_On &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Threshold_Set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[23f]"></a>motion_sensor_show</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion_sensor.o(.text.motion_sensor_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motion_sensor_show &rArr; console_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_motion_sensor
</UL>

<P><STRONG><a name="[271]"></a>player_get_vol</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, player.o(.text.player_get_vol))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_player_vol
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_param
</UL>

<P><STRONG><a name="[2a3]"></a>player_inc_vol</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, player.o(.text.player_inc_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = player_inc_vol &rArr; BSP_MP3_Set_Volume &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Set_Volume
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Get_Min_Volume
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Get_Max_Volume
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_player_vol
</UL>

<P><STRONG><a name="[2c5]"></a>player_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, player.o(.text.player_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = player_init &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Set_Volume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f8]"></a>player_is_playing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, player.o(.text.player_is_playing))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_play
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_stop_snd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_stop_snd
</UL>

<P><STRONG><a name="[242]"></a>player_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, player.o(.text.player_off))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_player
</UL>

<P><STRONG><a name="[241]"></a>player_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, player.o(.text.player_on))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_player
</UL>

<P><STRONG><a name="[1f5]"></a>player_play_snd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, player.o(.text.player_play_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = player_play_snd &rArr; player_play_sequence_start &rArr; BSP_MP3_Play_Dir_File &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_sequence_start
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_player
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_play_snd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_play_snd
</UL>

<P><STRONG><a name="[201]"></a>player_report_clk</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, player.o(.text.player_report_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = player_report_clk &rArr; player_play_sequence_start &rArr; BSP_MP3_Play_Dir_File &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cext_cal_hour12
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_synthetise_number
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_sequence_start
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_number_to_tune
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_dump_seq
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_year
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_month
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_min
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_hour
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_day
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_date
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_player
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_play_snd
</UL>

<P><STRONG><a name="[243]"></a>player_report_temperature</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, player.o(.text.player_report_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = player_report_temperature &rArr; thermometer_read_fah &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_synthetise_number
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_sequence_start
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_number_to_tune
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_dump_seq
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_fah
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_read_cen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_player
</UL>

<P><STRONG><a name="[2a1]"></a>player_save_config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, player.o(.text.player_save_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = player_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_player_vol
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[15e]"></a>player_scan</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, player.o(.text.player_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = player_scan &rArr; BSP_MP3_Play_Dir_File &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Play_Dir_File
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_sequence_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[2a0]"></a>player_set_vol</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, player.o(.text.player_set_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = player_set_vol &rArr; BSP_MP3_Set_Volume &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Set_Volume
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Get_Min_Volume
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Get_Max_Volume
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[240]"></a>player_show</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, player.o(.text.player_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = player_show &rArr; console_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_player
</UL>

<P><STRONG><a name="[1f9]"></a>player_stop_play</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, player.o(.text.player_stop_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = player_stop_play &rArr; player_play_sequence_stop &rArr; BSP_MP3_Stop &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_sequence_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_player
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_play
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_stop_snd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_stop_snd
</UL>

<P><STRONG><a name="[249]"></a>power_33_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(.text.power_33_enable))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_33_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_init
</UL>

<P><STRONG><a name="[245]"></a>power_33_enabled</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, power.o(.text.power_33_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power_33_enabled &rArr; BSP_GPIO_Power_33_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_33_Enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
</UL>

<P><STRONG><a name="[24b]"></a>power_490_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(.text.power_490_enable))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_490_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_on
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_off
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_init
</UL>

<P><STRONG><a name="[247]"></a>power_490_enabled</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, power.o(.text.power_490_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power_490_enabled &rArr; BSP_GPIO_Power_490_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_490_Enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
</UL>

<P><STRONG><a name="[24a]"></a>power_50_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(.text.power_50_enable))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_50_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_init
</UL>

<P><STRONG><a name="[246]"></a>power_50_enabled</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, power.o(.text.power_50_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power_50_enabled &rArr; BSP_GPIO_Power_50_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_50_Enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
</UL>

<P><STRONG><a name="[24c]"></a>power_cal_65</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, power.o(.text.power_cal_65))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = power_cal_65 &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Get_Value
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
</UL>

<P><STRONG><a name="[24d]"></a>power_cal_90</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, power.o(.text.power_cal_90))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = power_cal_90 &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Get_Value
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
</UL>

<P><STRONG><a name="[2d9]"></a>power_enter_powersave</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, power.o(.text.power_enter_powersave))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = power_enter_powersave &rArr; display_leave_powersave &rArr; display_on &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWR_Sleep
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_reset_timeo
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_leave_powersave
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_enter_powersave
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_leave_powersave
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_enter_powersave
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_test_powersave
</UL>

<P><STRONG><a name="[244]"></a>power_get_bat_voltage</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, power.o(.text.power_get_bat_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = power_get_bat_voltage &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Get_Value
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_bat
</UL>

<P><STRONG><a name="[273]"></a>power_get_timeo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, power.o(.text.power_get_timeo))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_power
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_param
</UL>

<P><STRONG><a name="[2a5]"></a>power_inc_timeo</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, power.o(.text.power_inc_timeo))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_ps
</UL>

<P><STRONG><a name="[2c1]"></a>power_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, power.o(.text.power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = power_init &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_50_Enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Set_WDG
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_mon_start
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24e]"></a>power_iv18_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(.text.power_iv18_enable))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_IV18_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_on
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_off
</UL>

<P><STRONG><a name="[248]"></a>power_iv18_enabled</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, power.o(.text.power_iv18_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power_iv18_enabled &rArr; BSP_GPIO_Power_IV18_Enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_IV18_Enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
</UL>

<P><STRONG><a name="[2da]"></a>power_mon_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, power.o(.text.power_mon_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = power_mon_start &rArr; BSP_ADC1_Start &rArr; HAL_ADC_Start_IT &rArr; OUTLINED_FUNCTION_0 &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM3_Start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_init
</UL>

<P><STRONG><a name="[292]"></a>power_reset_timeo</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, power.o(.text.power_reset_timeo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power_reset_timeo
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_now_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_enter_powersave
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_week
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_time
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_temp
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_date
</UL>

<P><STRONG><a name="[156]"></a>power_scan</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text.power_scan))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
</UL>

<P><STRONG><a name="[29c]"></a>power_set_timeo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, power.o(.text.power_set_timeo))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[291]"></a>power_test_powersave</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, power.o(.text.power_test_powersave))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = power_test_powersave &rArr; power_enter_powersave &rArr; display_leave_powersave &rArr; display_on &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_enter_powersave
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_diff_now_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_week
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_time
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_temp
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_date
</UL>

<P><STRONG><a name="[29d]"></a>power_timeo_save_config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, power.o(.text.power_timeo_save_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = power_timeo_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_ps
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[14d]"></a>power_wakeup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, power.o(.text.power_wakeup))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[2c7]"></a>remote_control_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, remote_control.o(.text.remote_control_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cc]"></a>remote_control_run</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, remote_control.o(.text.remote_control_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = remote_control_run &rArr; remote_control_dump_msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Transmit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Receive
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_dump_msg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>remote_control_scan</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, remote_control.o(.text.remote_control_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = remote_control_scan &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[21a]"></a>rtc_enable_32768HZ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc.o(.text.rtc_enable_32768HZ))
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Set_En32khz
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_from_rtc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_leave_powersave
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_leave_console
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_enter_powersave
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_enable_interrupt
</UL>

<P><STRONG><a name="[20d]"></a>rtc_get_date</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rtc.o(.text.rtc_get_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rtc_get_date &rArr; OUTLINED_FUNCTION_0 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Get_Year
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Get_Month
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Get_Day
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Get_Date
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_from_rtc
</UL>

<P><STRONG><a name="[1f3]"></a>rtc_get_time</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rtc.o(.text.rtc_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Get_Sec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Get_Min
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Get_Hour
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_from_rtc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_find_curr
</UL>

<P><STRONG><a name="[2c0]"></a>rtc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc.o(.text.rtc_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>rtc_set_date</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rtc.o(.text.rtc_set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rtc_set_date &rArr; OUTLINED_FUNCTION_0 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Set_Year
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Set_Month
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Set_Day
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Set_Date
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Write_Data
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
</UL>

<P><STRONG><a name="[224]"></a>rtc_set_time</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtc.o(.text.rtc_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rtc_set_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Set_Min
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Set_Hour
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Write_Data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Set_Sec
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
</UL>

<P><STRONG><a name="[293]"></a>sm_common_show_function</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sm_common.o(.text.sm_common_show_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_common_show_function &rArr; display_show_string &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_show_string
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_beep_beep
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_date_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_time_init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_init
</UL>

<P><STRONG><a name="[2ca]"></a>sm_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sm.o(.text.sm_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[209]"></a>sm_run</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, sm.o(.text.sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sm_run &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_proc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_proc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_proc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_mod_set_proc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_mod_proc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_proc
</UL>

<P><STRONG><a name="[2c9]"></a>task_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, task.o(.text.task_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cb]"></a>task_run</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, task.o(.text.task_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_run
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[277]"></a>thermometer_get_unit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thermometer.o(.text.thermometer_get_unit))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo_unit
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_thermo
</UL>

<P><STRONG><a name="[2c8]"></a>thermometer_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, thermometer.o(.text.thermometer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = thermometer_init &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[278]"></a>thermometer_read_cen</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, thermometer.o(.text.thermometer_read_cen))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = thermometer_read_cen &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Read_Data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Get_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_temperature
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo
</UL>

<P><STRONG><a name="[279]"></a>thermometer_read_fah</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, thermometer.o(.text.thermometer_read_fah))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = thermometer_read_fah &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Read_Data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Get_Temperature
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_temperature
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo
</UL>

<P><STRONG><a name="[2a7]"></a>thermometer_save_config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thermometer.o(.text.thermometer_save_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = thermometer_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_thermo
</UL>

<P><STRONG><a name="[2a6]"></a>thermometer_set_unit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thermometer.o(.text.thermometer_set_unit))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_thermo
</UL>

<P><STRONG><a name="[1ea]"></a>ticks_inc_1ms</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ticks.o(.text.ticks_inc_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ticks_inc_1ms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2bd]"></a>ticks_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ticks.o(.text.ticks_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ticks_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b4]"></a>timer_clr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(.text.timer_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_stop
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_hour
</UL>

<P><STRONG><a name="[2b9]"></a>timer_get_hour</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text.timer_get_hour))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_sec
</UL>

<P><STRONG><a name="[2ba]"></a>timer_get_min</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text.timer_get_min))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_sec
</UL>

<P><STRONG><a name="[2bb]"></a>timer_get_sec</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text.timer_get_sec))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_sec
</UL>

<P><STRONG><a name="[27d]"></a>timer_get_snd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text.timer_get_snd))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_param
</UL>

<P><STRONG><a name="[2b6]"></a>timer_inc_hour</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(.text.timer_inc_hour))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_hour
</UL>

<P><STRONG><a name="[2b7]"></a>timer_inc_min</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer.o(.text.timer_inc_min))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_min
</UL>

<P><STRONG><a name="[1ec]"></a>timer_inc_ms39</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, timer.o(.text.timer_inc_ms39))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = timer_inc_ms39 &rArr; timer_refresh_display &rArr; display_format_timer &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[2b8]"></a>timer_inc_sec</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer.o(.text.timer_inc_sec))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_sec
</UL>

<P><STRONG><a name="[2a8]"></a>timer_inc_snd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text.timer_inc_snd))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_timer_snd
</UL>

<P><STRONG><a name="[2c3]"></a>timer_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = timer_init &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2af]"></a>timer_next_history</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text.timer_next_history))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_pause
</UL>

<P><STRONG><a name="[2a9]"></a>timer_play_snd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text.timer_play_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = timer_play_snd &rArr; player_play_snd &rArr; player_play_sequence_start &rArr; BSP_MP3_Play_Dir_File &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_snd
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_stop
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_timer_snd
</UL>

<P><STRONG><a name="[2b0]"></a>timer_refresh_display</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(.text.timer_refresh_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = timer_refresh_display &rArr; display_format_timer &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_is_on
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_inc_ms39
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_stop
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_run
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_pause
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_sec
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_min
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_hour
</UL>

<P><STRONG><a name="[2ad]"></a>timer_refresh_display_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text.timer_refresh_display_enable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_stop
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_hour
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_init
</UL>

<P><STRONG><a name="[2b2]"></a>timer_resume</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text.timer_resume))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_run
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_run
</UL>

<P><STRONG><a name="[2b3]"></a>timer_save</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(.text.timer_save))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_run
</UL>

<P><STRONG><a name="[29f]"></a>timer_save_config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timer.o(.text.timer_save_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = timer_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_timer_snd
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[2b5]"></a>timer_set_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text.timer_set_mode))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_stop
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_hour
</UL>

<P><STRONG><a name="[29e]"></a>timer_set_snd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text.timer_set_snd))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param
</UL>

<P><STRONG><a name="[2b1]"></a>timer_start</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text.timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = timer_start &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_run
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_run
</UL>

<P><STRONG><a name="[2ae]"></a>timer_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text.timer_stop))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_watch_pause
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_stop
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_pause
</UL>

<P><STRONG><a name="[2a4]"></a>timer_stop_play</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(.text.timer_stop_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = timer_stop_play &rArr; player_stop_play &rArr; player_play_sequence_stop &rArr; BSP_MP3_Stop &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_stop_play
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_is_playing
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer_set_hour
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_timer_snd
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_param_ps
</UL>

<P><STRONG><a name="[2e3]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fe]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[254]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>

<P><STRONG><a name="[2ff]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[300]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[2e5]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[301]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[302]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[303]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[251]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
</UL>

<P><STRONG><a name="[2e6]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[304]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[305]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[306]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[255]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[307]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[308]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[309]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[30a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[159]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[158]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>

<P><STRONG><a name="[15b]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[151]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_adc_ex.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[18b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[18c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[18a]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[185]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[186]"></a>__NVIC_SetPriority</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[187]"></a>PWR_OverloadWfe</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_pwr.o(.text.PWR_OverloadWfe))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[1c5]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[16c]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_70
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[17b]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_48
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[17e]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(.text.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[17a]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[1c2]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(.text.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1c7]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_62
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
</UL>

<P><STRONG><a name="[17c]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(.text.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_70
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[172]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[178]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[174]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[173]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[168]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[176]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[167]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_19 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[175]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[166]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[16d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1c1]"></a>OUTLINED_FUNCTION_31</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[16f]"></a>OUTLINED_FUNCTION_34</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_34))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[170]"></a>OUTLINED_FUNCTION_35</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_35))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_35 &rArr; I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[177]"></a>OUTLINED_FUNCTION_38</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_38))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[16e]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[17d]"></a>OUTLINED_FUNCTION_42</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_42))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[1c4]"></a>OUTLINED_FUNCTION_48</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_48))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[16b]"></a>OUTLINED_FUNCTION_49</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_49))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[179]"></a>OUTLINED_FUNCTION_50</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_50))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[162]"></a>OUTLINED_FUNCTION_59</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_59))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[17f]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[1c8]"></a>OUTLINED_FUNCTION_62</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_62))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>

<P><STRONG><a name="[169]"></a>OUTLINED_FUNCTION_64</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_64))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1c6]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[1c3]"></a>OUTLINED_FUNCTION_70</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_70))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_70 &rArr; I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[16a]"></a>OUTLINED_FUNCTION_73</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_73))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[165]"></a>OUTLINED_FUNCTION_76</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_76))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[164]"></a>OUTLINED_FUNCTION_80</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_80))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[171]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[198]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[199]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>

<P><STRONG><a name="[19b]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>

<P><STRONG><a name="[19f]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[195]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1a4]"></a>OUTLINED_FUNCTION_30</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_30))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_30
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b0]"></a>OUTLINED_FUNCTION_38</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_38))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_38 &rArr; TIM_SlaveTimer_SetConfig &rArr; TIM_TI1_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
</UL>

<P><STRONG><a name="[19d]"></a>OUTLINED_FUNCTION_40</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_40))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[194]"></a>OUTLINED_FUNCTION_46</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_46))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1a3]"></a>OUTLINED_FUNCTION_49</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_49))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a0]"></a>OUTLINED_FUNCTION_51</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_51))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_51 &rArr; TIM_TI1_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[19c]"></a>OUTLINED_FUNCTION_52</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_52))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>

<P><STRONG><a name="[1b1]"></a>OUTLINED_FUNCTION_56</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_56))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
</UL>

<P><STRONG><a name="[1aa]"></a>OUTLINED_FUNCTION_57</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_57))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1ed]"></a>OUTLINED_FUNCTION_68</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_68))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
</UL>

<P><STRONG><a name="[19e]"></a>OUTLINED_FUNCTION_69</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_69))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[197]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1a9]"></a>OUTLINED_FUNCTION_70</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_70))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[19a]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>

<P><STRONG><a name="[1ab]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1ad]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_68
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1ae]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1e3]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.TIM_SlaveTimer_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_SlaveTimer_SetConfig &rArr; TIM_TI1_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_38
</UL>

<P><STRONG><a name="[1e6]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_51
</UL>

<P><STRONG><a name="[1a1]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[191]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
</UL>

<P><STRONG><a name="[190]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_18 &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
</UL>

<P><STRONG><a name="[18d]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
</UL>

<P><STRONG><a name="[18e]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
</UL>

<P><STRONG><a name="[18f]"></a>OUTLINED_FUNCTION_29</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.OUTLINED_FUNCTION_29))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
</UL>

<P><STRONG><a name="[192]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
</UL>

<P><STRONG><a name="[193]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
</UL>

<P><STRONG><a name="[1bb]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1ba]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1bc]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b5]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[1b4]"></a>UART_EndRxTransfer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>UART_Receive_IT</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c9]"></a>UART_SetConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1c0]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[157]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[ff]"></a>BSP_I2C_Quit_Busy</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, i2c.o(.text.BSP_I2C_Quit_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_I2C_Quit_Busy &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Read
</UL>

<P><STRONG><a name="[100]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Quit_Busy
</UL>

<P><STRONG><a name="[101]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Quit_Busy
</UL>

<P><STRONG><a name="[102]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Quit_Busy
</UL>

<P><STRONG><a name="[103]"></a>delay_us</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, i2c.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Quit_Busy
</UL>

<P><STRONG><a name="[108]"></a>BSP_IV18_Show_Data</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, iv18.o(.text.BSP_IV18_Show_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_IV18_Show_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Scan
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Load_Data
</UL>

<P><STRONG><a name="[114]"></a>BSP_MP3_Cal_Checksum</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mp3.o(.text.BSP_MP3_Cal_Checksum))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Wait_Response
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Send_Message
</UL>

<P><STRONG><a name="[112]"></a>BSP_MP3_Fill_Msg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mp3.o(.text.BSP_MP3_Fill_Msg))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Stop
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Set_Volume
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Play_Dir_File
</UL>

<P><STRONG><a name="[113]"></a>BSP_MP3_Send_Message</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mp3.o(.text.BSP_MP3_Send_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Transmit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Dump_Msg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Wait_Response
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Cal_Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Stop
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Set_Volume
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Play_Dir_File
</UL>

<P><STRONG><a name="[110]"></a>BSP_MP3_Wait_Response</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mp3.o(.text.BSP_MP3_Wait_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Receive
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Dump_Msg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Cal_Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Send_Message
</UL>

<P><STRONG><a name="[116]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mp3.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Wait_Response
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Send_Message
</UL>

<P><STRONG><a name="[13a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tim.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM4_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM3_Init
</UL>

<P><STRONG><a name="[148]"></a>BSP_USART_Receive</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(.text.BSP_USART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_USART_Receive &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Receive
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Receive
</UL>

<P><STRONG><a name="[144]"></a>BSP_USART_Transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(.text.BSP_USART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_Transmit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Transmit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_Transmit
</UL>

<P><STRONG><a name="[147]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; HAL_UART_Init &rArr; OUTLINED_FUNCTION_1 &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_UART_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_UART_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_UART_Init
</UL>

<P><STRONG><a name="[1be]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usart.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1bf]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[14b]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Transmit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Receive
</UL>

<P><STRONG><a name="[ac]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, acc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Init
</UL>

<P><STRONG><a name="[af]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, acc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Init
</UL>

<P><STRONG><a name="[b3]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, acc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_Off
</UL>

<P><STRONG><a name="[126]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, acc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Read_Int_Status
</UL>

<P><STRONG><a name="[b0]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, acc.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Threshold_Set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACC_Power_Off
</UL>

<P><STRONG><a name="[c6]"></a>BSP_Blue_Tooth_AT_Cmd</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, blue_tooth.o(.text.BSP_Blue_Tooth_AT_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_Blue_Tooth_AT_Cmd &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Transmit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART3_Receive
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Blue_Tooth_Rst
</UL>

<P><STRONG><a name="[f6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_IV18_Enabled
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_50_Enabled
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_490_Enabled
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Power_33_Enabled
</UL>

<P><STRONG><a name="[125]"></a>_BSP_I2C_Write</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, rom.o(.text._BSP_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Write
</UL>

<P><STRONG><a name="[124]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, rom.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ROM_Write
</UL>

<P><STRONG><a name="[d1]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ds3231.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Get_Sec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Get_Min
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Sec
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Min
</UL>

<P><STRONG><a name="[e4]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ds3231.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
</UL>

<P><STRONG><a name="[e0]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ds3231.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Set_Min
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Set_Year
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Set_Month
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Set_Sec
</UL>

<P><STRONG><a name="[cd]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ds3231.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Get_Month
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Get_Date
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Date
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_get_hour
</UL>

<P><STRONG><a name="[de]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ds3231.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cext_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Date_Set_Date
</UL>

<P><STRONG><a name="[ea]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ds3231.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
</UL>

<P><STRONG><a name="[e6]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ds3231.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
</UL>

<P><STRONG><a name="[e5]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ds3231.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Dump
</UL>

<P><STRONG><a name="[da]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ds3231.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Sec
</UL>

<P><STRONG><a name="[eb]"></a>_ds3231_dump_raw</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ds3231.o(.text._ds3231_dump_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _ds3231_dump_raw &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Init
</UL>

<P><STRONG><a name="[cf]"></a>_ds3231_get_hour</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ds3231.o(.text._ds3231_get_hour))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Get_Hour
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Get_Hour
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_set_hour_12
</UL>

<P><STRONG><a name="[d6]"></a>_ds3231_set_hour</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ds3231.o(.text._ds3231_set_hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ds3231_set_hour
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Set_Hour
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Hour
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_set_hour_12
</UL>

<P><STRONG><a name="[d8]"></a>_ds3231_set_hour_12</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ds3231.o(.text._ds3231_set_hour_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ds3231_set_hour_12 &rArr; _ds3231_set_hour
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_set_hour
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ds3231_get_hour
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Time_Set_Hour_12
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Hour_12
</UL>

<P><STRONG><a name="[205]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, alarm.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_dump
</UL>

<P><STRONG><a name="[1d7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, alarm.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_proc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_sync_to_rtc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_find_curr
</UL>

<P><STRONG><a name="[1dd]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alarm.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_dump
</UL>

<P><STRONG><a name="[1f1]"></a>alarm0_find_curr</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, alarm.o(.text.alarm0_find_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_bubble_sort
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_resync_rtc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_load_config
</UL>

<P><STRONG><a name="[1fa]"></a>alarm0_sync_to_rtc</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, alarm.o(.text.alarm0_sync_to_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = alarm0_sync_to_rtc &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Read_Data
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Enable_Alarm_Int
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Clr_Alarm_Int_Flag
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Sec
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Min
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Hour
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_scan
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_resync_rtc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_load_config
</UL>

<P><STRONG><a name="[203]"></a>alarm1_sync_to_rtc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, alarm.o(.text.alarm1_sync_to_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = alarm1_sync_to_rtc &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Read_Data
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Enable_Alarm_Int
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Clr_Alarm_Int_Flag
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Min
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Alarm_Set_Hour
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_load_config
</UL>

<P><STRONG><a name="[1ca]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, button.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_set_proc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_mod_set_proc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_mod_proc
</UL>

<P><STRONG><a name="[214]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, button.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_proc
</UL>

<P><STRONG><a name="[215]"></a>delay_us</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, button.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_proc
</UL>

<P><STRONG><a name="[218]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_dump
</UL>

<P><STRONG><a name="[1d8]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_from_rtc
</UL>

<P><STRONG><a name="[250]"></a>find_config</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, config.o(.text.find_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = find_config &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read
</UL>

<P><STRONG><a name="[267]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>

<P><STRONG><a name="[268]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>

<P><STRONG><a name="[266]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>

<P><STRONG><a name="[25e]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>

<P><STRONG><a name="[1dc]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_get_light_percent
</UL>

<P><STRONG><a name="[269]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>

<P><STRONG><a name="[25d]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_param_beeper
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
</UL>

<P><STRONG><a name="[263]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>

<P><STRONG><a name="[1e0]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_dp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_dp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_blink
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light
</UL>

<P><STRONG><a name="[25f]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_player_vol
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
</UL>

<P><STRONG><a name="[27a]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo
</UL>

<P><STRONG><a name="[265]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>

<P><STRONG><a name="[26e]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_power
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_motion_mon
</UL>

<P><STRONG><a name="[1e8]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; BSP_IV18_Set_Dig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IV18_Set_Dig
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_power
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_motion_mon
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
</UL>

<P><STRONG><a name="[26a]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, display.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_clock
</UL>

<P><STRONG><a name="[1cb]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, player.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_sequence_stop
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_dump_seq
</UL>

<P><STRONG><a name="[2cd]"></a>player_dump_seq</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, player.o(.text.player_dump_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = player_dump_seq &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_temperature
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[2d0]"></a>player_number_to_tune</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, player.o(.text.player_number_to_tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = player_number_to_tune &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_temperature
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_synthetise_number
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[2d1]"></a>player_play_sequence_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, player.o(.text.player_play_sequence_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = player_play_sequence_start &rArr; BSP_MP3_Play_Dir_File &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Play_Dir_File
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_temperature
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play_snd
</UL>

<P><STRONG><a name="[2d2]"></a>player_play_sequence_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, player.o(.text.player_play_sequence_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = player_play_sequence_stop &rArr; BSP_MP3_Stop &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MP3_Stop
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_scan
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_stop_play
</UL>

<P><STRONG><a name="[2d5]"></a>player_synthetise_number</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, player.o(.text.player_synthetise_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = player_synthetise_number &rArr; player_number_to_tune &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_number_to_tune
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_temperature
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_report_clk
</UL>

<P><STRONG><a name="[1cc]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
</UL>

<P><STRONG><a name="[1ef]"></a>_call_cmd</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, console.o(.text._call_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _call_cmd &rArr; console_search_cmd_by_name &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_search_cmd_by_name
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_run
</UL>

<P><STRONG><a name="[8]"></a>con_quit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, console.o(.text.con_quit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = con_quit &rArr; console_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.cmds)
</UL>
<P><STRONG><a name="[88]"></a>null_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, task.o(.text.null_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = null_proc &rArr; sm_run &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.rodata.task_procs)
</UL>
<P><STRONG><a name="[294]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remote_control.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stop_alarm
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_param
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_bat
</UL>

<P><STRONG><a name="[2dd]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remote_control.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_dump_msg
</UL>

<P><STRONG><a name="[b]"></a>do_get_alarm</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, remote_control.o(.text.do_get_alarm))
<BR>[Address Reference Count : 1]<UL><LI> remote_control.o(.data.remote_control_proc)
</UL>
<P><STRONG><a name="[f]"></a>do_get_bat</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, remote_control.o(.text.do_get_bat))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = do_get_bat &rArr; power_get_bat_voltage &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_bat_voltage
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remote_control.o(.data.remote_control_proc)
</UL>
<P><STRONG><a name="[d]"></a>do_get_param</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, remote_control.o(.text.do_get_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = do_get_param &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_snd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_timeo
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_get_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_get_th
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_test_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_test_enable
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_test_enable
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remote_control.o(.data.remote_control_proc)
</UL>
<P><STRONG><a name="[9]"></a>do_get_time</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, remote_control.o(.text.do_get_time))
<BR>[Address Reference Count : 1]<UL><LI> remote_control.o(.data.remote_control_proc)
</UL>
<P><STRONG><a name="[c]"></a>do_set_alarm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, remote_control.o(.text.do_set_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = do_set_alarm &rArr; alarm_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_resync_rtc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remote_control.o(.data.remote_control_proc)
</UL>
<P><STRONG><a name="[e]"></a>do_set_param</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, remote_control.o(.text.do_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = do_set_param &rArr; timer_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_snd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_save_config
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_timeo_save_config
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_set_timeo
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_set_vol
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_save_config
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_snd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_get_timeo
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_get_vol
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_get_th
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_test_enable
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_set_enable
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_save_config
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_test_enable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_set_enable
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_save_config
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_test_enable
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_set_enable
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_set_th
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_save_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remote_control.o(.data.remote_control_proc)
</UL>
<P><STRONG><a name="[a]"></a>do_set_time</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, remote_control.o(.text.do_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_set_time &rArr; alarm_resync_rtc &rArr; alarm0_find_curr &rArr; rtc_get_time &rArr; OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_enable_interrupt
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_resync_rtc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remote_control.o(.data.remote_control_proc)
</UL>
<P><STRONG><a name="[10]"></a>do_stop_alarm</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, remote_control.o(.text.do_stop_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = do_stop_alarm &rArr; alarm0_stop_snd &rArr; player_stop_play &rArr; player_play_sequence_stop &rArr; BSP_MP3_Stop &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_stop_snd
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remote_control.o(.data.remote_control_proc)
</UL>
<P><STRONG><a name="[2db]"></a>remote_control_connected</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, remote_control.o(.text.remote_control_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = remote_control_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_run
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_scan
</UL>

<P><STRONG><a name="[2dc]"></a>remote_control_dump_msg</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, remote_control.o(.text.remote_control_dump_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = remote_control_dump_msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_run
</UL>

<P><STRONG><a name="[1cd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Read_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_date
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_date
</UL>

<P><STRONG><a name="[1d9]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; BSP_DS3231_Read_Data &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DS3231_Read_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
</UL>

<P><STRONG><a name="[1ce]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, con_power.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_power
</UL>

<P><STRONG><a name="[1d0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, con_beeper.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_beeper
</UL>

<P><STRONG><a name="[1d1]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, con_display.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
</UL>

<P><STRONG><a name="[1da]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, con_display.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_display
</UL>

<P><STRONG><a name="[1d2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, con_player.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_player
</UL>

<P><STRONG><a name="[1d3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sm_clock_display.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_week
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_time
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_temp
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_date
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm0
</UL>

<P><STRONG><a name="[290]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sm_clock_display.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clock_display_alarm0
</UL>

<P><STRONG><a name="[11]"></a>do_clock_display_alarm0</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sm_clock_display.o(.text.do_clock_display_alarm0))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = do_clock_display_alarm0 &rArr; display_format_alarm0 &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_stop_snd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_play_snd
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_get_hit_index
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_clock_display.o(.data.sm_trans_clock_display_time)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_alarm0)
</UL>
<P><STRONG><a name="[13]"></a>do_clock_display_alarm1</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sm_clock_display.o(.text.do_clock_display_alarm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_clock_display_alarm1 &rArr; alarm1_play_snd &rArr; player_report_clk &rArr; player_play_sequence_start &rArr; BSP_MP3_Play_Dir_File &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_stop_snd
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_play_snd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_clock_display.o(.data.sm_trans_clock_display_time)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_alarm1)
</UL>
<P><STRONG><a name="[14]"></a>do_clock_display_date</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sm_clock_display.o(.text.do_clock_display_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_clock_display_date &rArr; power_test_powersave &rArr; power_enter_powersave &rArr; display_leave_powersave &rArr; display_on &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_test_powersave
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_reset_timeo
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_clock_display.o(.data.sm_trans_clock_display_time)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_date)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_week)
</UL>
<P><STRONG><a name="[17]"></a>do_clock_display_temp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sm_clock_display.o(.text.do_clock_display_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_clock_display_temp &rArr; power_test_powersave &rArr; power_enter_powersave &rArr; display_leave_powersave &rArr; display_on &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_test_powersave
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_reset_timeo
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_clock_display.o(.data.sm_trans_clock_display_time)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_week)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_temp)
</UL>
<P><STRONG><a name="[12]"></a>do_clock_display_time</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sm_clock_display.o(.text.do_clock_display_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_clock_display_time &rArr; power_test_powersave &rArr; power_enter_powersave &rArr; display_leave_powersave &rArr; display_on &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_test_powersave
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_reset_timeo
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 6]<UL><LI> sm_clock_display.o(.data.sm_trans_clock_display_init)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_time)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_date)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_temp)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_alarm0)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_alarm1)
</UL>
<P><STRONG><a name="[15]"></a>do_clock_display_week</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sm_clock_display.o(.text.do_clock_display_week))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_clock_display_week &rArr; power_test_powersave &rArr; power_enter_powersave &rArr; display_leave_powersave &rArr; display_on &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_test_powersave
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_reset_timeo
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_clock_display.o(.data.sm_trans_clock_display_date)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_week)
<LI> sm_clock_display.o(.data.sm_trans_clock_display_temp)
</UL>
<P><STRONG><a name="[2d]"></a>do_set_time_hour</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sm_set_time.o(.text.do_set_time_hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_set_time_hour &rArr; clock_refresh_display &rArr; display_format_clock &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_hour
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_hour
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_resync_rtc
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_set_time.o(.data.sm_trans_set_time_init)
<LI> sm_set_time.o(.data.sm_trans_set_time_hour)
<LI> sm_set_time.o(.data.sm_trans_set_time_sec)
</UL>
<P><STRONG><a name="[2e]"></a>do_set_time_min</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, sm_set_time.o(.text.do_set_time_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_set_time_min &rArr; clock_refresh_display &rArr; display_format_clock &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_min
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_min
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_resync_rtc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_time.o(.data.sm_trans_set_time_hour)
<LI> sm_set_time.o(.data.sm_trans_set_time_min)
</UL>
<P><STRONG><a name="[30]"></a>do_set_time_sec</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sm_set_time.o(.text.do_set_time_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = do_set_time_sec &rArr; clock_refresh_display &rArr; display_format_clock &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_sec
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clr_sec
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_resync_rtc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_time.o(.data.sm_trans_set_time_min)
<LI> sm_set_time.o(.data.sm_trans_set_time_sec)
</UL>
<P><STRONG><a name="[1f]"></a>do_set_date_date</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, sm_set_date.o(.text.do_set_date_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = do_set_date_date &rArr; clock_refresh_display &rArr; display_format_clock &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_date
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_date
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_date.o(.data.sm_trans_set_date_mon)
<LI> sm_set_date.o(.data.sm_trans_set_date_date)
</UL>
<P><STRONG><a name="[22]"></a>do_set_date_mon</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, sm_set_date.o(.text.do_set_date_mon))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = do_set_date_mon &rArr; clock_refresh_display &rArr; display_format_clock &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_mon
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_month
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_date.o(.data.sm_trans_set_date_year)
<LI> sm_set_date.o(.data.sm_trans_set_date_mon)
</UL>
<P><STRONG><a name="[20]"></a>do_set_date_year</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, sm_set_date.o(.text.do_set_date_year))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = do_set_date_year &rArr; clock_refresh_display &rArr; display_format_clock &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_clock_year
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sync_to_rtc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display_enable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_refresh_display
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_inc_year
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_set_date.o(.data.sm_trans_set_date_init)
<LI> sm_set_date.o(.data.sm_trans_set_date_year)
<LI> sm_set_date.o(.data.sm_trans_set_date_date)
</UL>
<P><STRONG><a name="[1d5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sm_set_alarm.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; alarm_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_min
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_hour
</UL>

<P><STRONG><a name="[1db]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sm_set_alarm.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; alarm_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_min
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_hour
</UL>

<P><STRONG><a name="[1de]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sm_set_alarm.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; display_format_alarm0 &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_sel
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_min
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_hour
</UL>

<P><STRONG><a name="[256]"></a>delay_ms</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, sm_set_alarm.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_alarm_snd
</UL>

<P><STRONG><a name="[19]"></a>do_set_alarm_day</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sm_set_alarm.o(.text.do_set_alarm_day))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = do_set_alarm_day &rArr; alarm_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_day
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_test_enable
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_set_enable
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_alarm.o(.data.sm_trans_set_alarm_min)
<LI> sm_set_alarm.o(.data.sm_trans_set_alarm_day)
</UL>
<P><STRONG><a name="[1c]"></a>do_set_alarm_hour</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sm_set_alarm.o(.text.do_set_alarm_hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = do_set_alarm_hour &rArr; alarm_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_hour
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_inc_hour
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_alarm.o(.data.sm_trans_set_alarm_sel)
<LI> sm_set_alarm.o(.data.sm_trans_set_alarm_hour)
</UL>
<P><STRONG><a name="[1d]"></a>do_set_alarm_min</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sm_set_alarm.o(.text.do_set_alarm_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = do_set_alarm_min &rArr; OUTLINED_FUNCTION_1 &rArr; alarm_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_min
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_inc_min
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_alarm.o(.data.sm_trans_set_alarm_hour)
<LI> sm_set_alarm.o(.data.sm_trans_set_alarm_min)
</UL>
<P><STRONG><a name="[1e]"></a>do_set_alarm_sel</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sm_set_alarm.o(.text.do_set_alarm_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = do_set_alarm_sel &rArr; display_format_alarm0 &rArr; config_read_int &rArr; BSP_ROM_Read &rArr; BSP_I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_31 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_sel
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_stop_snd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_get_cnt
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_set_alarm.o(.data.sm_trans_set_alarm_init)
<LI> sm_set_alarm.o(.data.sm_trans_set_alarm_sel)
<LI> sm_set_alarm.o(.data.sm_trans_set_alarm_snd)
</UL>
<P><STRONG><a name="[1a]"></a>do_set_alarm_snd</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, sm_set_alarm.o(.text.do_set_alarm_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = do_set_alarm_snd &rArr; OUTLINED_FUNCTION_1 &rArr; alarm_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_alarm_snd
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm0
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_stop_snd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_play_snd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm0_inc_snd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_alarm.o(.data.sm_trans_set_alarm_day)
<LI> sm_set_alarm.o(.data.sm_trans_set_alarm_snd)
</UL>
<P><STRONG><a name="[23]"></a>do_set_param_baoshi</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sm_set_param.o(.text.do_set_param_baoshi))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = do_set_param_baoshi &rArr; alarm_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_alarm1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save_config
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_test_enable
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm1_set_enable
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_param.o(.data.sm_trans_set_param_beeper)
<LI> sm_set_param.o(.data.sm_trans_set_param_baoshi)
</UL>
<P><STRONG><a name="[26]"></a>do_set_param_beeper</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sm_set_param.o(.text.do_set_param_beeper))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = do_set_param_beeper &rArr; beeper_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_param_beeper
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_test_enable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_set_enable
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_save_config
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_set_param.o(.data.sm_trans_set_param_init)
<LI> sm_set_param.o(.data.sm_trans_set_param_beeper)
<LI> sm_set_param.o(.data.sm_trans_set_param_motion_mon)
</UL>
<P><STRONG><a name="[27]"></a>do_set_param_hour12</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sm_set_param.o(.text.do_set_param_hour12))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_set_param_hour12 &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_read_int
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_hour12
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_write
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_param.o(.data.sm_trans_set_param_player_vol)
<LI> sm_set_param.o(.data.sm_trans_set_param_hour12)
</UL>
<P><STRONG><a name="[28]"></a>do_set_param_light_mon</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sm_set_param.o(.text.do_set_param_light_mon))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = do_set_param_light_mon &rArr; display_mon_light_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_test_enable
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_set_enable
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mon_light_save_config
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_light_mon
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_param.o(.data.sm_trans_set_param_hour12)
<LI> sm_set_param.o(.data.sm_trans_set_param_light_mon)
</UL>
<P><STRONG><a name="[29]"></a>do_set_param_motion_mon</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sm_set_param.o(.text.do_set_param_motion_mon))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = do_set_param_motion_mon &rArr; motion_sensor_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_motion_mon
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_save_config
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_sensor_inc_th
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_param.o(.data.sm_trans_set_param_light_mon)
<LI> sm_set_param.o(.data.sm_trans_set_param_motion_mon)
</UL>
<P><STRONG><a name="[2a]"></a>do_set_param_player_vol</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sm_set_param.o(.text.do_set_param_player_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = do_set_param_player_vol &rArr; player_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_save_config
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_inc_vol
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_player_vol
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_param.o(.data.sm_trans_set_param_thermo)
<LI> sm_set_param.o(.data.sm_trans_set_param_player_vol)
</UL>
<P><STRONG><a name="[2b]"></a>do_set_param_ps</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sm_set_param.o(.text.do_set_param_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = do_set_param_ps &rArr; power_timeo_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_play
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_timeo_save_config
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_inc_timeo
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_power
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_param.o(.data.sm_trans_set_param_timer_snd)
<LI> sm_set_param.o(.data.sm_trans_set_param_ps)
</UL>
<P><STRONG><a name="[2c]"></a>do_set_param_thermo</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sm_set_param.o(.text.do_set_param_thermo))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = do_set_param_thermo &rArr; thermometer_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_get_unit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_thermo_unit
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_set_unit
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermometer_save_config
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_param.o(.data.sm_trans_set_param_ps)
<LI> sm_set_param.o(.data.sm_trans_set_param_thermo)
</UL>
<P><STRONG><a name="[24]"></a>do_set_param_timer_snd</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sm_set_param.o(.text.do_set_param_timer_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = do_set_param_timer_snd &rArr; timer_save_config &rArr; config_write &rArr; BSP_ROM_Write &rArr; _BSP_I2C_Write &rArr; BSP_I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_play
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_save_config
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_play_snd
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_inc_snd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_format_timer
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_set_param.o(.data.sm_trans_set_param_baoshi)
<LI> sm_set_param.o(.data.sm_trans_set_param_timer_snd)
</UL>
<P><STRONG><a name="[37]"></a>do_timer_pause</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sm_timer.o(.text.do_timer_pause))
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_timer.o(.data.sm_trans_timer_run)
</UL>
<P><STRONG><a name="[35]"></a>do_timer_run</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sm_timer.o(.text.do_timer_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_timer_run &rArr; timer_start &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_resume
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_timer.o(.data.sm_trans_timer_set_sec)
<LI> sm_timer.o(.data.sm_trans_timer_pause)
</UL>
<P><STRONG><a name="[34]"></a>do_timer_set_hour</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sm_timer.o(.text.do_timer_set_hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = do_timer_set_hour &rArr; timer_stop_play &rArr; player_stop_play &rArr; player_play_sequence_stop &rArr; BSP_MP3_Stop &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_play
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_mode
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display_enable
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_inc_hour
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_timer_hour
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sm_timer.o(.data.sm_trans_timer_init)
<LI> sm_timer.o(.data.sm_trans_timer_set_hour)
<LI> sm_timer.o(.data.sm_trans_timer_set_sec)
<LI> sm_timer.o(.data.sm_trans_timer_stop)
</UL>
<P><STRONG><a name="[38]"></a>do_timer_set_min</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sm_timer.o(.text.do_timer_set_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = do_timer_set_min &rArr; timer_refresh_display &rArr; display_format_timer &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_inc_min
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_timer_min
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_timer.o(.data.sm_trans_timer_set_hour)
<LI> sm_timer.o(.data.sm_trans_timer_set_min)
</UL>
<P><STRONG><a name="[3a]"></a>do_timer_set_sec</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, sm_timer.o(.text.do_timer_set_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = do_timer_set_sec &rArr; timer_refresh_display &rArr; display_format_timer &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_inc_sec
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_sec
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_min
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_hour
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_timer_sec
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_timer.o(.data.sm_trans_timer_set_min)
<LI> sm_timer.o(.data.sm_trans_timer_set_sec)
</UL>
<P><STRONG><a name="[36]"></a>do_timer_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sm_timer.o(.text.do_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = do_timer_stop &rArr; timer_play_snd &rArr; player_play_snd &rArr; player_play_sequence_start &rArr; BSP_MP3_Play_Dir_File &rArr; BSP_MP3_Send_Message &rArr; BSP_MP3_Wait_Response &rArr; BSP_MP3_Dump_Msg &rArr; debug_printf &rArr; BSP_USART1_Transmit &rArr; BSP_USART_Transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_play_snd
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_blink_all
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_timer.o(.data.sm_trans_timer_run)
<LI> sm_timer.o(.data.sm_trans_timer_pause)
<LI> sm_timer.o(.data.sm_trans_timer_stop)
</UL>
<P><STRONG><a name="[32]"></a>do_stop_watch_pause</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sm_stop_watch.o(.text.do_stop_watch_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = do_stop_watch_pause &rArr; timer_refresh_display &rArr; display_format_timer &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_next_history
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_stop_watch.o(.data.sm_trans_stop_watch_run)
<LI> sm_stop_watch.o(.data.sm_trans_stop_watch_pause)
</UL>
<P><STRONG><a name="[33]"></a>do_stop_watch_run</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sm_stop_watch.o(.text.do_stop_watch_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = do_stop_watch_run &rArr; timer_refresh_display &rArr; display_format_timer &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_save
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_resume
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sm_stop_watch.o(.data.sm_trans_stop_watch_stop)
<LI> sm_stop_watch.o(.data.sm_trans_stop_watch_run)
<LI> sm_stop_watch.o(.data.sm_trans_stop_watch_pause)
</UL>
<P><STRONG><a name="[31]"></a>do_stop_watch_stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sm_stop_watch.o(.text.do_stop_watch_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = do_stop_watch_stop &rArr; timer_refresh_display &rArr; display_format_timer &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_mode
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display_enable
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_refresh_display
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_mode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_beep_beep
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_stop_watch.o(.data.sm_trans_stop_watch_init)
<LI> sm_stop_watch.o(.data.sm_trans_stop_watch_pause)
</UL>
<P><STRONG><a name="[2e7]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e4]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[2ea]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e9]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
